package com.feihua.framework.base.impl;

import com.feihua.exception.BaseException;
import com.feihua.exception.DataConflictException;
import com.feihua.framework.base.modules.datascope.api.ApiBaseDataScopeService;
import com.feihua.framework.base.modules.postjob.api.ApiBasePostPoService;
import com.feihua.framework.base.modules.postjob.po.BasePostPo;
import com.feihua.framework.base.modules.rel.api.ApiBasePostRoleRelPoService;
import com.feihua.framework.base.modules.rel.dto.BasePostRoleRelDto;
import com.feihua.framework.base.modules.role.api.ApiBaseRolePoService;
import com.feihua.framework.base.modules.role.po.BaseRolePo;
import com.feihua.framework.constants.DictEnum;
import com.feihua.framework.base.modules.dict.api.ApiBaseDictDataScopeDefinePoService;
import com.feihua.framework.base.modules.dict.dto.BaseDictDataScopeDefineDto;
import com.feihua.framework.base.modules.dict.dto.BaseDictDataScopeDefineParamDto;
import com.feihua.framework.base.modules.dict.po.BaseDictDataScopeDefinePo;
import com.feihua.framework.base.modules.rel.api.ApiBaseRoleDataScopeRelPoService;
import com.feihua.framework.base.modules.rel.api.ApiBaseUserDataScopeRelPoService;
import com.feihua.framework.base.modules.rel.dto.BaseRoleDataScopeRelDto;
import com.feihua.framework.base.modules.rel.dto.BaseUserDataScopeRelDto;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2018-03-26 12:08:07
 */
@Service
public class ApiBaseDictDataScopeDefinePoServiceImpl extends ApiBaseServiceImpl<BaseDictDataScopeDefinePo, BaseDictDataScopeDefineDto, String> implements ApiBaseDictDataScopeDefinePoService,ApiBaseDataScopeService<BaseDictDataScopeDefineDto> {

    public ApiBaseDictDataScopeDefinePoServiceImpl() {
        super(BaseDictDataScopeDefineDto.class);
    }


    @Autowired
    private ApiBaseUserDataScopeRelPoService apiBaseUserDataScopeRelPoService;
    @Autowired
    private ApiBaseRoleDataScopeRelPoService apiBaseRoleDataScopeRelPoService;

    @Autowired
    private ApiBaseRolePoService apiBaseRolePoService;
    @Autowired
    private ApiBasePostPoService apiBasePostPoService;
    @Autowired
    private ApiBasePostRoleRelPoService apiBasePostRoleRelPoService;

    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BaseDictDataScopeDefineDto selectByDataScopeId(String dataScopeId) {

        BaseDictDataScopeDefinePo dataScopeDefinePo = new BaseDictDataScopeDefinePo();
        dataScopeDefinePo.setDataScopeId(dataScopeId);
        dataScopeDefinePo.setDelFlag(BasePo.YesNo.N.name());
        return this.selectOne(dataScopeDefinePo);
    }
    @Transactional(rollbackFor = Exception.class,readOnly = false)
    @Override
    public BaseDictDataScopeDefineDto setDictDataScopeDefine(BaseDictDataScopeDefineParamDto dictDataScopeDefineParamDto) {
        BaseDictDataScopeDefinePo dictDataScopeDefineCondition = new BaseDictDataScopeDefinePo();
        dictDataScopeDefineCondition.setDataScopeId(dictDataScopeDefineParamDto.getDataScopeId());
        dictDataScopeDefineCondition.setDelFlag(BasePo.YesNo.N.name());
        BaseDictDataScopeDefineDto result = null;
        // 查询是否存在
        BaseDictDataScopeDefinePo dictDataScopeDefinePo = this.selectOneSimple(dictDataScopeDefineCondition);
        // 如果不存在，添加一条新的设置
        if (dictDataScopeDefinePo == null) {
            BaseDictDataScopeDefinePo insertDictDataScopeDefinePo = new BaseDictDataScopeDefinePo();
            insertDictDataScopeDefinePo.setDataScopeId(dictDataScopeDefineParamDto.getDataScopeId());
            insertDictDataScopeDefinePo.setType(dictDataScopeDefineParamDto.getType());
            insertDictDataScopeDefinePo = this.preInsert(insertDictDataScopeDefinePo,dictDataScopeDefineParamDto.getCurrentUserId());

            result = this.insert(insertDictDataScopeDefinePo);

            return result;
        }else{
            // 如果已经存在，更新
            dictDataScopeDefinePo.setType(dictDataScopeDefineParamDto.getType());
            dictDataScopeDefinePo = this.preUpdate(dictDataScopeDefinePo,dictDataScopeDefineParamDto.getCurrentUserId());
            // 这里没有考虑乐观锁
            int r = this.updateByPrimaryKey(dictDataScopeDefinePo);
            if(r == 1){
                result = this.wrapDto(dictDataScopeDefinePo);
                return result;
            }else{
                return null;
            }

        }

    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BaseDictDataScopeDefineDto selectDataScopeDefineByUserId(String userId, String roleId,String postId) {
        // 用户设置了数据范围，以该数据范围优先
        BaseUserDataScopeRelDto userDataScopeRelDto = apiBaseUserDataScopeRelPoService.selectByUserId(userId);
        if(userDataScopeRelDto != null){
            BaseDictDataScopeDefineDto defineDto = this.selectByDataScopeId(userDataScopeRelDto.getDataScopeId());
            return defineDto;
        }
        // 取角色设置的数据范围
        BaseRolePo rolePo = apiBaseRolePoService.selectByPrimaryKeySimple(roleId,false);
        if (rolePo != null && !BasePo.YesNo.Y.name().equals(rolePo.getDisabled())) {
            BaseRoleDataScopeRelDto roleDataScopeRelDto = apiBaseRoleDataScopeRelPoService.selectByRoleId(roleId);
            if (roleDataScopeRelDto != null) {
                BaseDictDataScopeDefineDto defineDto = this.selectByDataScopeId(roleDataScopeRelDto.getDataScopeId());

                return defineDto;
            }
        }
        // 取岗位绑定的角色设置的数据范围
        BasePostPo postPo = apiBasePostPoService.selectByPrimaryKeySimple(postId,false);
        if (postPo != null && !BasePo.YesNo.Y.name().equals(postPo.getDisabled())) {
            BasePostRoleRelDto postRoleRelDto = apiBasePostRoleRelPoService.selectByPostId(postId);
            if (postRoleRelDto != null) {
                BaseRoleDataScopeRelDto roleDataScopeRelDto = apiBaseRoleDataScopeRelPoService.selectByRoleId(postRoleRelDto.getRoleId());
                if(roleDataScopeRelDto != null){
                    BaseDictDataScopeDefineDto defineDto = this.selectByDataScopeId(roleDataScopeRelDto.getDataScopeId());
                    return defineDto;
                }
            }
        }
        return null;
    }

    @Override
    public boolean isAllData(BaseDictDataScopeDefineDto dataScopeDefine) {
        return false;
    }

    @Override
    public BaseDictDataScopeDefineDto wrapDto(BaseDictDataScopeDefinePo po) {
        if (po == null) {
            return null;
        }
        BaseDictDataScopeDefineDto defineDto = new BaseDictDataScopeDefineDto();
        defineDto.setId(po.getId());
        defineDto.setType(po.getType());
        defineDto.setDataType(po.getDataType());
        defineDto.setDataAreaId(po.getDataAreaId());
        defineDto.setDataUserId(po.getDataUserId());
        defineDto.setUpdateAt(po.getUpdateAt());
        defineDto.setDataScopeId(po.getDataScopeId());
        defineDto.setDataOfficeId(po.getDataOfficeId());
        return defineDto;
    }
}