package com.feihua.framework.base.impl;

import com.feihua.framework.base.modules.datascope.api.ApiBaseDataScopeService;
import com.feihua.framework.base.modules.group.api.ApiBaseUserGroupPoService;
import com.feihua.framework.base.modules.group.dto.BaseUserGroupDataScopeDefineDto;
import com.feihua.framework.base.modules.group.dto.BaseUserGroupDto;
import com.feihua.framework.base.modules.group.dto.SearchBaseUserGroupsConditionDto;
import com.feihua.framework.base.modules.group.dto.SearchUserGroupsConditionDsfDto;
import com.feihua.framework.base.modules.group.po.BaseUserGroupPo;
import com.feihua.framework.base.modules.office.api.ApiBaseOfficePoService;
import com.feihua.framework.base.modules.office.dto.BaseOfficeDto;
import com.feihua.framework.base.modules.office.po.BaseOfficePo;
import com.feihua.framework.base.modules.rel.api.ApiBaseUserUserGroupRelPoService;
import com.feihua.framework.base.modules.rel.dto.BaseUserUserGroupRelDto;
import com.feihua.framework.constants.DictEnum;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.pojo.PageAndOrderbyParamDto;
import feihua.jdbc.api.pojo.PageResultDto;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2019-06-20 13:18:42
 */
@Service
public class ApiBaseUserGroupPoServiceImpl extends ApiBaseServiceImpl<BaseUserGroupPo, BaseUserGroupDto, String> implements ApiBaseUserGroupPoService {
    @Autowired
    com.feihua.framework.base.mapper.BaseUserGroupPoMapper baseUserGroupPoMapper;
    @Autowired
    private ApiBaseDataScopeService<BaseUserGroupDataScopeDefineDto> apiBaseUserGroupDataScopeService;
    @Autowired
    private ApiBaseUserUserGroupRelPoService apiBaseUserUserGroupRelPoService;
    @Autowired
    private ApiBaseOfficePoService apiBaseOfficePoService;
    
    public ApiBaseUserGroupPoServiceImpl() {
        super(BaseUserGroupDto.class);
    }

    @Override
    public PageResultDto<BaseUserGroupDto> searchBaseUserGroupsDsf(SearchBaseUserGroupsConditionDto conditionDto, PageAndOrderbyParamDto pageAndOrderbyParamDto) {

        BaseUserGroupDataScopeDefineDto defineDto = apiBaseUserGroupDataScopeService.selectDataScopeDefineByUserId(conditionDto.getCurrentUserId(),conditionDto.getCurrentRoleId(),conditionDto.getCurrentPostId());
        // 如果未设置数据范围定义，没有数据
        if (defineDto == null || StringUtils.isEmpty(defineDto.getType()) || DictEnum.UserGroupDataScope.no.name().equals(defineDto.getType())) {
            return new PageResultDto(null, null);
        }
        SearchUserGroupsConditionDsfDto searchUserGroupsConditionDsfDto = new SearchUserGroupsConditionDsfDto();
        searchUserGroupsConditionDsfDto.setCode(conditionDto.getCode());
        searchUserGroupsConditionDsfDto.setName(conditionDto.getName());
        searchUserGroupsConditionDsfDto.setType(conditionDto.getType());
        searchUserGroupsConditionDsfDto.setDisabled(conditionDto.getDisabled());
        searchUserGroupsConditionDsfDto.setDataOfficeId(conditionDto.getDataOfficeId());
        searchUserGroupsConditionDsfDto.setIsPublic(conditionDto.getIsPublic());


        // 所有数据
        if(DictEnum.UserGroupDataScope.all.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
            List<BaseUserGroupDto> list = this.wrapDtos(baseUserGroupPoMapper.searchBaseUserGroups(searchUserGroupsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 公共数据
        if(DictEnum.UserGroupDataScope.publics.name().equals(defineDto.getType())){

            String selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and is_public = ''{0}'' ",BasePo.YesNo.Y.name());

            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
            searchUserGroupsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseUserGroupDto> list = this.wrapDtos(baseUserGroupPoMapper.searchBaseUserGroups(searchUserGroupsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 公共 + 用户所在机构
        if(DictEnum.UserGroupDataScope.publics_useroffice.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByUserId(conditionDto.getCurrentUserId());

            String selfCondition = null;
            if (officeDto == null) {
                selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and is_public = ''{0}'' ",BasePo.YesNo.Y.name());
            }else {
                selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and (is_public = ''{0}'' or data_office_id = ''{1}'') ",BasePo.YesNo.Y.name(),officeDto.getId());
            }
            searchUserGroupsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseUserGroupDto> list = this.wrapDtos(baseUserGroupPoMapper.searchBaseUserGroups(searchUserGroupsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 公共 + 用户所在机构及以下机构
        if(DictEnum.UserGroupDataScope.publics_userofficedown.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByUserId(conditionDto.getCurrentUserId());

            String selfCondition = null;
            if (officeDto == null) {
                selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and is_public = ''{0}'' ",BasePo.YesNo.Y.name());
            }else {

                List<BaseOfficePo> officePoList = new ArrayList<>();
                // 查询子机构

                List<BaseOfficePo> officePos = apiBaseOfficePoService.getChildrenAll(officeDto.getId());
                if(CollectionUtils.isNotEmpty(officePos)){
                    officePoList.addAll(officePos);
                }
                if(CollectionUtils.isEmpty(officePoList)){
                    return new PageResultDto();
                }
                // 机构查询完，根据机构id查询

                StringBuffer sb = new StringBuffer("and (is_public = '"+ BasePo.YesNo.Y.name() +"' or data_office_id ='"+ officeDto.getId() +"' ");
                for (BaseOfficePo officePo : officePoList) {
                    sb.append(" or data_office_id = '").append(officePo.getId()).append("'");
                }
                sb.append(")");

                selfCondition = sb.toString();
            }
            searchUserGroupsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseUserGroupDto> list = this.wrapDtos(baseUserGroupPoMapper.searchBaseUserGroups(searchUserGroupsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 用户所在机构
        if(DictEnum.UserGroupDataScope.useroffice.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByUserId(conditionDto.getCurrentUserId());
            // 如果机构不存在，直接返回空
            if(officeDto == null){
                return new PageResultDto(null, null);
            }
            String selfCondition = com.feihua.utils.string.StringUtils.messageFormat("and data_office_id = ''{0}'' ",officeDto.getId());

            searchUserGroupsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseUserGroupDto> list = this.wrapDtos(baseUserGroupPoMapper.searchBaseUserGroups(searchUserGroupsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 用户所在机构及以下机构
        if(DictEnum.UserGroupDataScope.userofficedown.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByUserId(conditionDto.getCurrentUserId());
            // 如果机构不存在，直接返回空
            if(officeDto == null){
                return new PageResultDto(null, null);
            }

            List<BaseOfficePo> officePoList = new ArrayList<>();
            // 查询子机构

            List<BaseOfficePo> officePos = apiBaseOfficePoService.getChildrenAll(officeDto.getId());
            if(CollectionUtils.isNotEmpty(officePos)){
                officePoList.addAll(officePos);
            }
            if(CollectionUtils.isEmpty(officePoList)){
                return new PageResultDto();
            }
            // 机构查询完，根据机构id查询

            StringBuffer sb = new StringBuffer("and (data_office_id ='"+ officeDto.getId() +"' ");
            for (BaseOfficePo officePo : officePoList) {
                sb.append(" or data_office_id = '").append(officePo.getId()).append("'");
            }
            sb.append(")");
            String selfCondition = sb.toString();

            searchUserGroupsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseUserGroupDto> list = this.wrapDtos(baseUserGroupPoMapper.searchBaseUserGroups(searchUserGroupsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 公共 + 用户角色所在机构
        if(DictEnum.UserGroupDataScope.publics_userroleoffice.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByRoleId(conditionDto.getCurrentRoleId(),false);
            String selfCondition = null;
            if (officeDto == null) {
                selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and is_public = ''{0}'' ",BasePo.YesNo.Y.name());
            }else {
                selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and (is_public = ''{0}'' or data_office_id = ''{1}'') ",BasePo.YesNo.Y.name(),officeDto.getId());
            }
            searchUserGroupsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseUserGroupDto> list = this.wrapDtos(baseUserGroupPoMapper.searchBaseUserGroups(searchUserGroupsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 公共 + 用户角色所在机构及以下机构
        if(DictEnum.UserGroupDataScope.publics_userroleofficedown.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByRoleId(conditionDto.getCurrentRoleId(),false);
            String selfCondition = null;
            if (officeDto == null) {
                selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and is_public = ''{0}'' ",BasePo.YesNo.Y.name());
            }else {

                List<BaseOfficePo> officePoList = new ArrayList<>();
                // 查询子机构

                List<BaseOfficePo> officePos = apiBaseOfficePoService.getChildrenAll(officeDto.getId());
                if(CollectionUtils.isNotEmpty(officePos)){
                    officePoList.addAll(officePos);
                }
                if(CollectionUtils.isEmpty(officePoList)){
                    return new PageResultDto();
                }
                // 机构查询完，根据机构id查询

                StringBuffer sb = new StringBuffer("and (is_public = '"+ BasePo.YesNo.Y.name() +"' or data_office_id ='"+ officeDto.getId() +"' ");
                for (BaseOfficePo officePo : officePoList) {
                    sb.append(" or data_office_id = '").append(officePo.getId()).append("'");
                }
                sb.append(")");

                selfCondition = sb.toString();
            }
            searchUserGroupsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseUserGroupDto> list = this.wrapDtos(baseUserGroupPoMapper.searchBaseUserGroups(searchUserGroupsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 用户角色所在机构
        if(DictEnum.UserGroupDataScope.userroleoffice.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByRoleId(conditionDto.getCurrentRoleId(),false);
            // 如果机构不存在，直接返回空
            if(officeDto == null){
                return new PageResultDto(null, null);
            }

            String selfCondition = com.feihua.utils.string.StringUtils.messageFormat("and data_office_id = ''{0}'' ",officeDto.getId());

            searchUserGroupsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseUserGroupDto> list = this.wrapDtos(baseUserGroupPoMapper.searchBaseUserGroups(searchUserGroupsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 用户角色所在机构及以下机构
        if(DictEnum.UserGroupDataScope.userroleofficedown.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByRoleId(conditionDto.getCurrentRoleId(),false);
            // 如果机构不存在，直接返回空
            if(officeDto == null){
                return new PageResultDto(null, null);
            }


            List<BaseOfficePo> officePoList = new ArrayList<>();
            // 查询子机构

            List<BaseOfficePo> officePos = apiBaseOfficePoService.getChildrenAll(officeDto.getId());
            if(CollectionUtils.isNotEmpty(officePos)){
                officePoList.addAll(officePos);
            }
            if(CollectionUtils.isEmpty(officePoList)){
                return new PageResultDto();
            }
            // 机构查询完，根据机构id查询

            StringBuffer sb = new StringBuffer("and (data_office_id ='"+ officeDto.getId() +"' ");
            for (BaseOfficePo officePo : officePoList) {
                sb.append(" or data_office_id = '").append(officePo.getId()).append("'");
            }
            sb.append(")");
            String selfCondition = sb.toString();

            searchUserGroupsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseUserGroupDto> list = this.wrapDtos(baseUserGroupPoMapper.searchBaseUserGroups(searchUserGroupsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 公共 + 用户岗位所在机构
        if(DictEnum.UserGroupDataScope.publics_userroleoffice.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByUserGroupId(conditionDto.getCurrentPostId(),false);
            String selfCondition = null;
            if (officeDto == null) {
                selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and is_public = ''{0}'' ",BasePo.YesNo.Y.name());
            }else {
                selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and (is_public = ''{0}'' or data_office_id = ''{1}'') ",BasePo.YesNo.Y.name(),officeDto.getId());
            }
            searchUserGroupsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseUserGroupDto> list = this.wrapDtos(baseUserGroupPoMapper.searchBaseUserGroups(searchUserGroupsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 公共 + 用户岗位所在机构及以下机构
        if(DictEnum.UserGroupDataScope.publics_userroleofficedown.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByUserGroupId(conditionDto.getCurrentPostId(),false);
            String selfCondition = null;
            if (officeDto == null) {
                selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and is_public = ''{0}'' ",BasePo.YesNo.Y.name());
            }else {


                List<BaseOfficePo> officePoList = new ArrayList<>();
                // 查询子机构

                List<BaseOfficePo> officePos = apiBaseOfficePoService.getChildrenAll(officeDto.getId());
                if(CollectionUtils.isNotEmpty(officePos)){
                    officePoList.addAll(officePos);
                }
                if(CollectionUtils.isEmpty(officePoList)){
                    return new PageResultDto();
                }
                // 机构查询完，根据机构id查询

                StringBuffer sb = new StringBuffer("and (is_public = '"+ BasePo.YesNo.Y.name() +"' or data_office_id ='"+ officeDto.getId() +"' ");
                for (BaseOfficePo officePo : officePoList) {
                    sb.append(" or data_office_id = '").append(officePo.getId()).append("'");
                }
                sb.append(")");

                selfCondition = sb.toString();
            }
            searchUserGroupsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseUserGroupDto> list = this.wrapDtos(baseUserGroupPoMapper.searchBaseUserGroups(searchUserGroupsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 用户岗位所在机构
        if(DictEnum.UserGroupDataScope.userroleoffice.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByUserGroupId(conditionDto.getCurrentPostId(),false);
            // 如果机构不存在，直接返回空
            if(officeDto == null){
                return new PageResultDto(null, null);
            }
            String selfCondition = com.feihua.utils.string.StringUtils.messageFormat("and data_office_id = ''{0}'' ",officeDto.getId());

            searchUserGroupsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseUserGroupDto> list = this.wrapDtos(baseUserGroupPoMapper.searchBaseUserGroups(searchUserGroupsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 用户岗位所在机构及以下机构
        if(DictEnum.UserGroupDataScope.userroleoffice.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByUserGroupId(conditionDto.getCurrentPostId(),false);
            // 如果机构不存在，直接返回空
            if(officeDto == null){
                return new PageResultDto(null, null);
            }

            List<BaseOfficePo> officePoList = new ArrayList<>();
            // 查询子机构

            List<BaseOfficePo> officePos = apiBaseOfficePoService.getChildrenAll(officeDto.getId());
            if(CollectionUtils.isNotEmpty(officePos)){
                officePoList.addAll(officePos);
            }
            if(CollectionUtils.isEmpty(officePoList)){
                return new PageResultDto();
            }
            // 机构查询完，根据机构id查询

            StringBuffer sb = new StringBuffer("and (data_office_id ='"+ officeDto.getId() +"' ");
            for (BaseOfficePo officePo : officePoList) {
                sb.append(" or data_office_id = '").append(officePo.getId()).append("'");
            }
            sb.append(")");
            String selfCondition = sb.toString();

            searchUserGroupsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseUserGroupDto> list = this.wrapDtos(baseUserGroupPoMapper.searchBaseUserGroups(searchUserGroupsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 分配的用户分组
        if(DictEnum.UserGroupDataScope.assign.name().equals(defineDto.getType())){
            Set<String> userGroupIds = new HashSet<>();
            // 查询当前用户分配的用户分组
            List<BaseUserUserGroupRelDto> userUserGroupRelDtos = apiBaseUserUserGroupRelPoService.selectByUserId(conditionDto.getCurrentUserId());
            if(CollectionUtils.isNotEmpty(userUserGroupRelDtos)){
                for (BaseUserUserGroupRelDto baseUserUserGroupRelDto : userUserGroupRelDtos) {
                    userGroupIds.add(baseUserUserGroupRelDto.getUserGroupId());
                }
            }

            if (userGroupIds.isEmpty()) {
                return new PageResultDto();
            }

            StringBuffer sb = new StringBuffer("and (1!=1 ");
            for (String userGroupId : userGroupIds) {
                sb.append(" or id = '").append(userGroupId).append("'");
            }
            sb.append(")");

            super.pageAndOrderbyStart(pageAndOrderbyParamDto);
            Page p = PageHelper.getLocalPage();
            searchUserGroupsConditionDsfDto.setSelfCondition(sb.toString());
            List<BaseUserGroupPo> list = baseUserGroupPoMapper.searchBaseUserGroups(searchUserGroupsConditionDsfDto);
            return new PageResultDto(this.wrapDtos(list), this.wrapPage(p));
        }
        return new PageResultDto(null, null);

    }

    @Override
    public BaseUserGroupDto wrapDto(BaseUserGroupPo po) {
        if (po == null) { return null; }
        BaseUserGroupDto dto = new BaseUserGroupDto();
        dto.setId(po.getId());
        dto.setName(po.getName());
        dto.setCode(po.getCode());
        dto.setType(po.getType());
        dto.setDisabled(po.getDisabled());
        dto.setDataUserId(po.getDataUserId());
        dto.setDataOfficeId(po.getDataOfficeId());
        dto.setDataType(po.getDataType());
        dto.setDataAreaId(po.getDataAreaId());
        dto.setUpdateAt(po.getUpdateAt());
        dto.setIsPublic(po.getIsPublic());
        return dto;
    }
}