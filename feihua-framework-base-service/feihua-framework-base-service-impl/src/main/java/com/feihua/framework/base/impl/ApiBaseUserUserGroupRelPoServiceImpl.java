package com.feihua.framework.base.impl;

import com.feihua.framework.base.modules.rel.api.ApiBaseUserUserGroupRelPoService;
import com.feihua.framework.base.modules.rel.dto.BaseUserUserGroupRelDto;
import com.feihua.framework.base.modules.rel.dto.BaseUserUserGroupRelDto;
import com.feihua.framework.base.modules.rel.dto.UserGroupBindUsersParamDto;
import com.feihua.framework.base.modules.rel.dto.UserBindUserGroupsParamDto;
import com.feihua.framework.base.modules.rel.po.BaseUserUserGroupRelPo;
import com.feihua.framework.base.modules.rel.po.BaseUserUserGroupRelPo;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2019-06-20 13:37:34
 */
@Service
public class ApiBaseUserUserGroupRelPoServiceImpl extends ApiBaseServiceImpl<BaseUserUserGroupRelPo, BaseUserUserGroupRelDto, String> implements ApiBaseUserUserGroupRelPoService {
    @Autowired
    com.feihua.framework.base.mapper.BaseUserUserGroupRelPoMapper BaseUserUserGroupRelPoMapper;

    public ApiBaseUserUserGroupRelPoServiceImpl() {
        super(BaseUserUserGroupRelDto.class);
    }

    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public List<BaseUserUserGroupRelDto> selectByUserId(String userId) {
        BaseUserUserGroupRelPo baseUserUserGroupRelPoCondition = new BaseUserUserGroupRelPo();
        baseUserUserGroupRelPoCondition.setUserId(userId);
        baseUserUserGroupRelPoCondition.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(baseUserUserGroupRelPoCondition);
    }

    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public List<BaseUserUserGroupRelDto> selectByUserGroupId(String userGroupId) {
        if (userGroupId == null) {
            return null;
        }
        BaseUserUserGroupRelPo baseUserUserGroupRelPoCondition = new BaseUserUserGroupRelPo();
        baseUserUserGroupRelPoCondition.setUserGroupId(userGroupId);
        baseUserUserGroupRelPoCondition.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(baseUserUserGroupRelPoCondition);
    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BaseUserUserGroupRelDto selectByUserIdAndUserGroupId(String userId, String userGroupId) {
        BaseUserUserGroupRelPo baseUserUserGroupRelPoCondition = new BaseUserUserGroupRelPo();
        baseUserUserGroupRelPoCondition.setUserGroupId(userGroupId);
        baseUserUserGroupRelPoCondition.setUserId(userId);
        baseUserUserGroupRelPoCondition.setDelFlag(BasePo.YesNo.N.name());
        return this.selectOne(baseUserUserGroupRelPoCondition);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int deleteFlagByUserId(String userId, String loginUserId) {
        BaseUserUserGroupRelPo baseUserUserGroupRelPoCondition = new BaseUserUserGroupRelPo();
        baseUserUserGroupRelPoCondition.setUserId(userId);
        baseUserUserGroupRelPoCondition.setDelFlag(BasePo.YesNo.N.name());
        return this.deleteFlagSelectiveWithUpdateUser(baseUserUserGroupRelPoCondition,loginUserId);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int deleteFlagByUserGroupId(String userGroupId, String loginUserId) {
        BaseUserUserGroupRelPo baseUserUserGroupRelPoCondition = new BaseUserUserGroupRelPo();
        baseUserUserGroupRelPoCondition.setUserGroupId(userGroupId);
        baseUserUserGroupRelPoCondition.setDelFlag(BasePo.YesNo.N.name());
        return this.deleteFlagSelectiveWithUpdateUser(baseUserUserGroupRelPoCondition,loginUserId);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int userBindUserGroups(UserBindUserGroupsParamDto userBindUserGroupsParamDto) {
        // 先删除以前的
        int deleteR = this.deleteFlagByUserId(userBindUserGroupsParamDto.getUserId(),userBindUserGroupsParamDto.getCurrentUserId());
        List<String> userGroupIds = userBindUserGroupsParamDto.getUserGroupIds();
        // 批量插入新关系
        if(userGroupIds != null && !userGroupIds.isEmpty()){
            BaseUserUserGroupRelPo userUserGroupRelPo = null;
            List<BaseUserUserGroupRelPo> addList = new ArrayList<>(userGroupIds.size());
            for (String userGroupId : userGroupIds) {
                userUserGroupRelPo = new BaseUserUserGroupRelPo();
                userUserGroupRelPo.setUserGroupId(userGroupId);
                userUserGroupRelPo.setUserId(userBindUserGroupsParamDto.getUserId());
                userUserGroupRelPo.setDelFlag(BasePo.YesNo.N.name());
                userUserGroupRelPo = this.preInsert(userUserGroupRelPo,userBindUserGroupsParamDto.getCurrentUserId());
                addList.add(userUserGroupRelPo);
            }
            return this.insertBatch(addList);
        }

        return deleteR;
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int userGroupBindUsers(UserGroupBindUsersParamDto userGroupBindUsersParamDto) {
        // 先删除以前的
        int deleteR = this.deleteFlagByUserGroupId(userGroupBindUsersParamDto.getUserGroupId(),userGroupBindUsersParamDto.getCurrentUserId());
        List<String> userIds = userGroupBindUsersParamDto.getUserIds();
        // 批量插入新关系
        if(userIds != null && !userIds.isEmpty()){
            BaseUserUserGroupRelPo userUserGroupRelPo = null;
            List<BaseUserUserGroupRelPo> addList = new ArrayList<>(userIds.size());
            for (String userId : userIds) {
                userUserGroupRelPo = new BaseUserUserGroupRelPo();
                userUserGroupRelPo.setUserId(userId);
                userUserGroupRelPo.setUserGroupId(userGroupBindUsersParamDto.getUserGroupId());
                userUserGroupRelPo.setDelFlag(BasePo.YesNo.N.name());
                userUserGroupRelPo = this.preInsert(userUserGroupRelPo,userGroupBindUsersParamDto.getCurrentUserId());
                addList.add(userUserGroupRelPo);
            }
            return this.insertBatch(addList);
        }

        return deleteR;
    }

    @Override
    public BaseUserUserGroupRelDto wrapDto(BaseUserUserGroupRelPo po) {
        if (po == null) { return null; }
        BaseUserUserGroupRelDto dto = new BaseUserUserGroupRelDto();
        dto.setId(po.getId());
        dto.setUserId(po.getUserId());
        dto.setUserGroupId(po.getUserGroupId());
        dto.setDataUserId(po.getDataUserId());
        dto.setDataOfficeId(po.getDataOfficeId());
        dto.setDataType(po.getDataType());
        dto.setDataAreaId(po.getDataAreaId());
        dto.setUpdateAt(po.getUpdateAt());
        return dto;
    }
}