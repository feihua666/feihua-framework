package com.feihua.framework.base.impl;

import com.feihua.framework.base.modules.group.api.ApiBaseUserGroupDataScopeDefineSelfPoService;
import com.feihua.framework.base.modules.group.dto.BaseUserGroupDataScopeDefineSelfDto;
import com.feihua.framework.base.modules.group.po.BaseUserGroupDataScopeDefineSelfPo;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2019-06-20 13:27:24
 */
@Service
public class ApiBaseUserGroupDataScopeDefineSelfPoServiceImpl extends ApiBaseServiceImpl<BaseUserGroupDataScopeDefineSelfPo, BaseUserGroupDataScopeDefineSelfDto, String> implements ApiBaseUserGroupDataScopeDefineSelfPoService {
    @Autowired
    com.feihua.framework.base.mapper.BaseUserGroupDataScopeDefineSelfPoMapper BaseUserGroupDataScopeDefineSelfPoMapper;

    public ApiBaseUserGroupDataScopeDefineSelfPoServiceImpl() {
        super(BaseUserGroupDataScopeDefineSelfDto.class);
    }


    @Transactional(rollbackFor = Exception.class)
    @Override
    public int insertUserGroupSelf(List<String> userGroupIds, String userGroupDataScopeDefineId, String currentUserId) {
        int r = 0;
        if(CollectionUtils.isNotEmpty(userGroupIds)){
            List<BaseUserGroupDataScopeDefineSelfPo> preInsertList = new ArrayList<>(userGroupIds.size());
            for (String userGroupId : userGroupIds) {
                // 自定义角色
                BaseUserGroupDataScopeDefineSelfPo baseCommonDataScopeDefineUserGroupSelfPo = new BaseUserGroupDataScopeDefineSelfPo();
                baseCommonDataScopeDefineUserGroupSelfPo.setUserGroupDataScopeDefineId(userGroupDataScopeDefineId);
                baseCommonDataScopeDefineUserGroupSelfPo.setUserGroupId(userGroupId);
                baseCommonDataScopeDefineUserGroupSelfPo = this.preInsert(baseCommonDataScopeDefineUserGroupSelfPo,currentUserId);
                preInsertList.add(baseCommonDataScopeDefineUserGroupSelfPo);
            }
            // 批量插入自定义角色
            r = this.insertBatch(preInsertList);
        }
        return r;
    }
    @Transactional(rollbackFor = Exception.class)
    @Override
    public int deleteUserGroupSelfByUserGroupDataScopeDefineId(String userGroupDataScopeDefineId, String currentUserId) {
        //先删除掉以前的配置
        BaseUserGroupDataScopeDefineSelfPo deleteCondition = new BaseUserGroupDataScopeDefineSelfPo();
        deleteCondition.setUserGroupDataScopeDefineId(userGroupDataScopeDefineId);
        int r = this.deleteFlagSelectiveWithUpdateUser(deleteCondition,currentUserId);

        return r;
    }

    @Override
    public List<BaseUserGroupDataScopeDefineSelfDto> selectByUserGroupDataScopeDefineId(String userGroupDataScopeDefineId) {
        BaseUserGroupDataScopeDefineSelfPo condition = new BaseUserGroupDataScopeDefineSelfPo();
        condition.setUserGroupDataScopeDefineId(userGroupDataScopeDefineId);
        condition.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(condition);
    }

    @Override
    public BaseUserGroupDataScopeDefineSelfDto wrapDto(BaseUserGroupDataScopeDefineSelfPo po) {
        if (po == null) { return null; }
        BaseUserGroupDataScopeDefineSelfDto dto = new BaseUserGroupDataScopeDefineSelfDto();
        dto.setId(po.getId());
        dto.setUserGroupDataScopeDefineId(po.getUserGroupDataScopeDefineId());
        dto.setUserGroupId(po.getUserGroupId());
        dto.setDataUserId(po.getDataUserId());
        dto.setDataOfficeId(po.getDataOfficeId());
        dto.setDataType(po.getDataType());
        dto.setDataAreaId(po.getDataAreaId());
        dto.setUpdateAt(po.getUpdateAt());
        return dto;
    }
}