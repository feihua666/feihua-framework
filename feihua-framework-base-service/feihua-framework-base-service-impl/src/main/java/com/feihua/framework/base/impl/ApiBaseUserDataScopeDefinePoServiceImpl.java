package com.feihua.framework.base.impl;

import com.feihua.exception.BaseException;
import com.feihua.exception.DataConflictException;
import com.feihua.framework.base.modules.datascope.api.ApiBaseDataScopeService;
import com.feihua.framework.base.modules.postjob.api.ApiBasePostPoService;
import com.feihua.framework.base.modules.postjob.po.BasePostPo;
import com.feihua.framework.base.modules.rel.api.ApiBasePostRoleRelPoService;
import com.feihua.framework.base.modules.rel.dto.BasePostRoleRelDto;
import com.feihua.framework.base.modules.role.api.ApiBaseRolePoService;
import com.feihua.framework.base.modules.role.po.BaseRolePo;
import com.feihua.framework.constants.DictEnum;
import com.feihua.framework.base.modules.rel.api.ApiBaseRoleDataScopeRelPoService;
import com.feihua.framework.base.modules.rel.api.ApiBaseUserDataScopeRelPoService;
import com.feihua.framework.base.modules.rel.dto.BaseRoleDataScopeRelDto;
import com.feihua.framework.base.modules.rel.dto.BaseUserDataScopeRelDto;
import com.feihua.framework.base.modules.user.api.ApiBaseUserDataScopeDefinePoService;
import com.feihua.framework.base.modules.user.dto.BaseUserDataScopeDefineDto;
import com.feihua.framework.base.modules.user.dto.BaseUserDataScopeDefineParamDto;
import com.feihua.framework.base.modules.user.po.BaseUserDataScopeDefinePo;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2018-03-19 11:19:20
 */
@Service
public class ApiBaseUserDataScopeDefinePoServiceImpl extends ApiBaseServiceImpl<BaseUserDataScopeDefinePo, BaseUserDataScopeDefineDto, String> implements ApiBaseUserDataScopeDefinePoService ,ApiBaseDataScopeService<BaseUserDataScopeDefineDto> {

    public ApiBaseUserDataScopeDefinePoServiceImpl() {
        super(BaseUserDataScopeDefineDto.class);
    }

    @Autowired
    private ApiBaseUserDataScopeRelPoService apiBaseUserDataScopeRelPoService;
    @Autowired
    private ApiBaseRoleDataScopeRelPoService apiBaseRoleDataScopeRelPoService;
    @Autowired
    private ApiBaseRolePoService apiBaseRolePoService;
    @Autowired
    private ApiBasePostPoService apiBasePostPoService;
    @Autowired
    private ApiBasePostRoleRelPoService apiBasePostRoleRelPoService;


    @Transactional(rollbackFor = Exception.class,readOnly = false)
    @Override
    public BaseUserDataScopeDefineDto setUserDataScopeDefine(BaseUserDataScopeDefineParamDto userDataScopeDefineParamDto) {
        BaseUserDataScopeDefinePo userDataScopeDefineCondition = new BaseUserDataScopeDefinePo();
        userDataScopeDefineCondition.setDataScopeId(userDataScopeDefineParamDto.getDataScopeId());
        userDataScopeDefineCondition.setDelFlag(BasePo.YesNo.N.name());
        BaseUserDataScopeDefineDto result = null;
        // 查询是否存在
        BaseUserDataScopeDefinePo userDataScopeDefinePo = this.selectOneSimple(userDataScopeDefineCondition);
        // 如果不存在，添加一条新的设置
        if (userDataScopeDefinePo == null) {
            BaseUserDataScopeDefinePo insertUserDataScopeDefinePo = new BaseUserDataScopeDefinePo();
            insertUserDataScopeDefinePo.setDataScopeId(userDataScopeDefineParamDto.getDataScopeId());
            insertUserDataScopeDefinePo.setType(userDataScopeDefineParamDto.getType());
            insertUserDataScopeDefinePo = this.preInsert(insertUserDataScopeDefinePo,userDataScopeDefineParamDto.getCurrentUserId());

            result = this.insert(insertUserDataScopeDefinePo);

            return result;
        }else{
            // 如果已经存在，更新
            userDataScopeDefinePo.setType(userDataScopeDefineParamDto.getType());
            userDataScopeDefinePo = this.preUpdate(userDataScopeDefinePo,userDataScopeDefineParamDto.getCurrentUserId());
            // 这里没有考虑乐观锁
            int r = this.updateByPrimaryKey(userDataScopeDefinePo);
            if(r == 1){
                result = this.wrapDto(userDataScopeDefinePo);

                return result;
            }else{
                return null;
            }

        }

    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BaseUserDataScopeDefineDto selectByDataScopeId(String dataScopeId) {
        BaseUserDataScopeDefinePo userDataScopeDefinePo = new BaseUserDataScopeDefinePo();
        userDataScopeDefinePo.setDataScopeId(dataScopeId);
        userDataScopeDefinePo.setDelFlag(BasePo.YesNo.N.name());
        return this.selectOne(userDataScopeDefinePo);
    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BaseUserDataScopeDefineDto selectDataScopeDefineByUserId(String userId, String roleId,String postId) {
        BaseUserDataScopeRelDto userDataScopeRelDto = apiBaseUserDataScopeRelPoService.selectByUserId(userId);
        // 用户设置了数据范围，以该数据范围优先
        if(userDataScopeRelDto != null){
            BaseUserDataScopeDefineDto defineDto = this.selectByDataScopeId(userDataScopeRelDto.getDataScopeId());
            return defineDto;
        }
        // 取角色设置的数据范围
        BaseRolePo rolePo = apiBaseRolePoService.selectByPrimaryKeySimple(roleId,false);
        if (rolePo != null && !BasePo.YesNo.Y.name().equals(rolePo.getDisabled())) {
            BaseRoleDataScopeRelDto roleDataScopeRelDto = apiBaseRoleDataScopeRelPoService.selectByRoleId(roleId);
            if (roleDataScopeRelDto != null) {
                BaseUserDataScopeDefineDto defineDto = this.selectByDataScopeId(roleDataScopeRelDto.getDataScopeId());

                return defineDto;
            }
        }
        // 取岗位绑定的角色设置的数据范围
        BasePostPo postPo = apiBasePostPoService.selectByPrimaryKeySimple(postId,false);
        if (postPo != null && !BasePo.YesNo.Y.name().equals(postPo.getDisabled())) {
            BasePostRoleRelDto postRoleRelDto = apiBasePostRoleRelPoService.selectByPostId(postId);
            if (postRoleRelDto != null) {
                BaseRoleDataScopeRelDto roleDataScopeRelDto = apiBaseRoleDataScopeRelPoService.selectByRoleId(postRoleRelDto.getRoleId());
                if(roleDataScopeRelDto != null){
                    BaseUserDataScopeDefineDto defineDto = this.selectByDataScopeId(roleDataScopeRelDto.getDataScopeId());
                    return defineDto;
                }
            }
        }
        return null;
    }

    @Override
    public boolean isAllData(BaseUserDataScopeDefineDto dataScopeDefine) {
        if (dataScopeDefine != null && DictEnum.UserDataScope.all.name().equals(dataScopeDefine.getType())) {
            return true;
        }
        return false;
    }

    @Override
    public BaseUserDataScopeDefineDto wrapDto(BaseUserDataScopeDefinePo po) {
        if (po == null) {
            return null;
        }
        BaseUserDataScopeDefineDto userDataScopeDefineDto = new BaseUserDataScopeDefineDto();
        userDataScopeDefineDto.setDataScopeId(po.getDataScopeId());
        userDataScopeDefineDto.setDataOfficeId(po.getDataOfficeId());
        userDataScopeDefineDto.setDataUserId(po.getDataUserId());
        userDataScopeDefineDto.setId(po.getId());
        userDataScopeDefineDto.setDataAreaId(po.getDataAreaId());
        userDataScopeDefineDto.setUpdateAt(po.getUpdateAt());
        userDataScopeDefineDto.setType(po.getType());
        userDataScopeDefineDto.setDataType(po.getDataType());
        return userDataScopeDefineDto;
    }
}