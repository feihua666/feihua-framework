package com.feihua.framework.base.impl;

import com.feihua.framework.base.modules.datascope.api.ApiBaseDataScopeService;
import com.feihua.framework.base.modules.postjob.api.ApiBasePostJobDataScopeDefinePoService;
import com.feihua.framework.base.modules.postjob.api.ApiBasePostPoService;
import com.feihua.framework.base.modules.postjob.dto.BasePostJobDataScopeDefineDto;
import com.feihua.framework.base.modules.postjob.dto.BasePostJobDataScopeDefineParamDto;
import com.feihua.framework.base.modules.postjob.po.BasePostJobDataScopeDefinePo;
import com.feihua.framework.base.modules.postjob.po.BasePostPo;
import com.feihua.framework.base.modules.rel.api.ApiBasePostRoleRelPoService;
import com.feihua.framework.base.modules.rel.api.ApiBaseRoleDataScopeRelPoService;
import com.feihua.framework.base.modules.rel.api.ApiBaseUserDataScopeRelPoService;
import com.feihua.framework.base.modules.rel.dto.BasePostRoleRelDto;
import com.feihua.framework.base.modules.rel.dto.BaseRoleDataScopeRelDto;
import com.feihua.framework.base.modules.rel.dto.BaseUserDataScopeRelDto;
import com.feihua.framework.base.modules.role.api.ApiBaseRolePoService;
import com.feihua.framework.base.modules.role.po.BaseRolePo;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2019-06-14 11:33:17
 */
@Service
public class ApiBasePostJobDataScopeDefinePoServiceImpl extends ApiBaseServiceImpl<BasePostJobDataScopeDefinePo, BasePostJobDataScopeDefineDto, String> implements ApiBasePostJobDataScopeDefinePoService , ApiBaseDataScopeService<BasePostJobDataScopeDefineDto> {
    @Autowired
    com.feihua.framework.base.mapper.BasePostJobDataScopeDefinePoMapper BasePostJobDataScopeDefinePoMapper;

    public ApiBasePostJobDataScopeDefinePoServiceImpl() {
        super(BasePostJobDataScopeDefineDto.class);
    }

    @Autowired
    private ApiBaseUserDataScopeRelPoService apiBaseUserDataScopeRelPoService;
    @Autowired
    private ApiBaseRoleDataScopeRelPoService apiBaseRoleDataScopeRelPoService;

    @Autowired
    private ApiBaseRolePoService apiBaseRolePoService;
    @Autowired
    private ApiBasePostPoService apiBasePostPoService;
    @Autowired
    private ApiBasePostRoleRelPoService apiBasePostRoleRelPoService;

    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BasePostJobDataScopeDefineDto selectByDataScopeId(String dataScopeId) {

        BasePostJobDataScopeDefinePo dataScopeDefinePo = new BasePostJobDataScopeDefinePo();
        dataScopeDefinePo.setDataScopeId(dataScopeId);
        dataScopeDefinePo.setDelFlag(BasePo.YesNo.N.name());
        return this.selectOne(dataScopeDefinePo);
    }
    @Transactional(rollbackFor = Exception.class,readOnly = false)
    @Override
    public BasePostJobDataScopeDefineDto setPostJobDataScopeDefine(BasePostJobDataScopeDefineParamDto postJobDataScopeDefineParamDto) {
        BasePostJobDataScopeDefinePo postJobDataScopeDefineCondition = new BasePostJobDataScopeDefinePo();
        postJobDataScopeDefineCondition.setDataScopeId(postJobDataScopeDefineParamDto.getDataScopeId());
        postJobDataScopeDefineCondition.setDelFlag(BasePo.YesNo.N.name());
        BasePostJobDataScopeDefineDto result = null;
        // 查询是否存在
        BasePostJobDataScopeDefinePo postJobDataScopeDefinePo = this.selectOneSimple(postJobDataScopeDefineCondition);
        // 如果不存在，添加一条新的设置
        if (postJobDataScopeDefinePo == null) {
            BasePostJobDataScopeDefinePo insertPostJobDataScopeDefinePo = new BasePostJobDataScopeDefinePo();
            insertPostJobDataScopeDefinePo.setDataScopeId(postJobDataScopeDefineParamDto.getDataScopeId());
            insertPostJobDataScopeDefinePo.setType(postJobDataScopeDefineParamDto.getType());
            insertPostJobDataScopeDefinePo = this.preInsert(insertPostJobDataScopeDefinePo,postJobDataScopeDefineParamDto.getCurrentUserId());

            result = this.insert(insertPostJobDataScopeDefinePo);

            return result;
        }else{
            // 如果已经存在，更新
            postJobDataScopeDefinePo.setType(postJobDataScopeDefineParamDto.getType());
            postJobDataScopeDefinePo = this.preUpdate(postJobDataScopeDefinePo,postJobDataScopeDefineParamDto.getCurrentUserId());
            // 这里没有考虑乐观锁
            int r = this.updateByPrimaryKey(postJobDataScopeDefinePo);
            if(r == 1){
                result = this.wrapDto(postJobDataScopeDefinePo);
                return result;
            }else{
                return null;
            }

        }

    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BasePostJobDataScopeDefineDto selectDataScopeDefineByUserId(String userId, String roleId,String postId) {
        // 用户设置了数据范围，以该数据范围优先
        BaseUserDataScopeRelDto userDataScopeRelDto = apiBaseUserDataScopeRelPoService.selectByUserId(userId);
        if(userDataScopeRelDto != null){
            BasePostJobDataScopeDefineDto defineDto = this.selectByDataScopeId(userDataScopeRelDto.getDataScopeId());
            return defineDto;
        }
        // 取角色设置的数据范围
        BaseRolePo rolePo = apiBaseRolePoService.selectByPrimaryKeySimple(roleId,false);
        if (rolePo != null && !BasePo.YesNo.Y.name().equals(rolePo.getDisabled())) {
            BaseRoleDataScopeRelDto roleDataScopeRelDto = apiBaseRoleDataScopeRelPoService.selectByRoleId(roleId);
            if (roleDataScopeRelDto != null) {
                BasePostJobDataScopeDefineDto defineDto = this.selectByDataScopeId(roleDataScopeRelDto.getDataScopeId());

                return defineDto;
            }
        }
        // 取岗位绑定的角色设置的数据范围
        BasePostPo postPo = apiBasePostPoService.selectByPrimaryKeySimple(postId,false);
        if (postPo != null && !BasePo.YesNo.Y.name().equals(postPo.getDisabled())) {
            BasePostRoleRelDto postRoleRelDto = apiBasePostRoleRelPoService.selectByPostId(postId);
            if (postRoleRelDto != null) {
                BaseRoleDataScopeRelDto roleDataScopeRelDto = apiBaseRoleDataScopeRelPoService.selectByRoleId(postRoleRelDto.getRoleId());
                if(roleDataScopeRelDto != null){
                    BasePostJobDataScopeDefineDto defineDto = this.selectByDataScopeId(roleDataScopeRelDto.getDataScopeId());
                    return defineDto;
                }
            }
        }
        return null;
    }

    @Override
    public boolean isAllData(BasePostJobDataScopeDefineDto dataScopeDefine) {
        return false;
    }

    @Override
    public BasePostJobDataScopeDefineDto wrapDto(BasePostJobDataScopeDefinePo po) {
        if (po == null) { return null; }
        BasePostJobDataScopeDefineDto dto = new BasePostJobDataScopeDefineDto();
        dto.setId(po.getId());
        dto.setDataScopeId(po.getDataScopeId());
        dto.setType(po.getType());
        dto.setDataUserId(po.getDataUserId());
        dto.setDataOfficeId(po.getDataOfficeId());
        dto.setDataType(po.getDataType());
        dto.setDataAreaId(po.getDataAreaId());
        dto.setUpdateAt(po.getUpdateAt());
        return dto;
    }
}