package com.feihua.framework.base.impl;

import com.feihua.framework.base.mapper.BaseDictPoMapper;
import com.feihua.framework.base.modules.datascope.api.ApiBaseDataScopeService;
import com.feihua.framework.base.modules.dict.api.ApiBaseDictPoService;
import com.feihua.framework.base.modules.dict.dto.*;
import com.feihua.framework.base.modules.dict.po.BaseDictPo;
import com.feihua.framework.base.modules.office.api.ApiBaseOfficePoService;
import com.feihua.framework.base.modules.office.dto.BaseOfficeDto;
import com.feihua.framework.constants.DictEnum;
import com.github.pagehelper.Page;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.pojo.Orderby;
import feihua.jdbc.api.pojo.PageAndOrderbyParamDto;
import feihua.jdbc.api.pojo.PageResultDto;
import feihua.jdbc.api.service.impl.ApiBaseTreeServiceImpl;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2017-12-21 13:31:23
 */
@Service
public class ApiBaseDictPoServiceImpl extends ApiBaseTreeServiceImpl<BaseDictPo, BaseDictDto, String> implements ApiBaseDictPoService {

    public ApiBaseDictPoServiceImpl() {
        super(BaseDictDto.class);
    }

    @Autowired
    private BaseDictPoMapper baseDictPoMapper;
    @Autowired
    private ApiBaseDataScopeService<BaseDictDataScopeDefineDto> apiBaseDictDataScopeService;
    @Autowired
    private ApiBaseOfficePoService apiBaseOfficePoService;


    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public PageResultDto<BaseDictDto> searchDictsDsf(SearchDictsConditionDto conditionDto, PageAndOrderbyParamDto pageAndOrderbyParamDto) {
        BaseDictDataScopeDefineDto defineDto = apiBaseDictDataScopeService.selectDataScopeDefineByUserId(conditionDto.getCurrentUserId(),conditionDto.getCurrentRoleId(),conditionDto.getCurrentPostId());
        // 如果未设置数据范围定义，没有数据
        if (defineDto == null || StringUtils.isEmpty(defineDto.getType()) || DictEnum.DictDataScope.no.name().equals(defineDto.getType())) {
            return new PageResultDto(null, null);
        }
        SearchDictsConditionDsfDto searchDictsConditionDsfDto = new SearchDictsConditionDsfDto();
        searchDictsConditionDsfDto.setValue(conditionDto.getValue());
        searchDictsConditionDsfDto.setName(conditionDto.getName());
        searchDictsConditionDsfDto.setType(conditionDto.getType());
        searchDictsConditionDsfDto.setIsSystem(conditionDto.getIsSystem());
        searchDictsConditionDsfDto.setParentId(conditionDto.getParentId());
        searchDictsConditionDsfDto.setIsPublic(conditionDto.getIsPublic());


        // 所有数据
        if(DictEnum.DictDataScope.all.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
            List<BaseDictDto> list = this.wrapDtos(baseDictPoMapper.searchDicts(searchDictsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 公共数据
        if(DictEnum.DictDataScope.publics.name().equals(defineDto.getType())){

            String selfCondition = com.feihua.utils.string.StringUtils.messageFormat("and is_public = ''{0}'' ",BasePo.YesNo.Y.name());

            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
            searchDictsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseDictDto> list = this.wrapDtos(baseDictPoMapper.searchDicts(searchDictsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 公共 + 用户所在机构的公司
        if(DictEnum.DictDataScope.publics_userofficecompany.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
            BaseOfficeDto company = null;
            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByUserId(conditionDto.getCurrentUserId());

            // 查找公司
            if(officeDto != null){
                // 查找公司
                company = apiBaseOfficePoService.selectParentCompany(officeDto.getId(),true);
            }
            String selfCondition = null;
            if (company == null) {
                selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and is_public = ''{0}'' ",BasePo.YesNo.Y.name());
            }else {
                selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and (is_public = ''{0}'' or data_office_id = ''{1}'') ",BasePo.YesNo.Y.name(),company.getId());
            }

            searchDictsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseDictDto> list = this.wrapDtos(baseDictPoMapper.searchDicts(searchDictsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 用户所在机构的公司
        if(DictEnum.DictDataScope.userofficecompany.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByUserId(conditionDto.getCurrentUserId());
            // 如果机构不存在，直接返回空
            if(officeDto == null){
                return new PageResultDto(null, null);
            }
            // 查找公司
            BaseOfficeDto company = apiBaseOfficePoService.selectParentCompany(officeDto.getId(),true);

            //没有找到公司
            if (company == null) {
                return new PageResultDto(null, null);

            }
            String selfCondition = com.feihua.utils.string.StringUtils.messageFormat("and data_office_id = ''{0}'' ",company.getId());

            searchDictsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseDictDto> list = this.wrapDtos(baseDictPoMapper.searchDicts(searchDictsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 公共 + 用户角色所在机构的公司
        if(DictEnum.DictDataScope.publics_userroleofficecompany.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByRoleId(conditionDto.getCurrentRoleId(),false);
            BaseOfficeDto company = null;
            // 查找公司
            if(officeDto != null){
                // 查找公司
                company = apiBaseOfficePoService.selectParentCompany(officeDto.getId(),true);
            }
            String selfCondition = null;
            if (company == null) {
                selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and is_public = ''{0}'' ",BasePo.YesNo.Y.name());
            }else {
                selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and (is_public = ''{0}'' or data_office_id = ''{1}'') ",BasePo.YesNo.Y.name(),company.getId());
            }
            searchDictsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseDictDto> list = this.wrapDtos(baseDictPoMapper.searchDicts(searchDictsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 用户角色所在机构的公司
        if(DictEnum.DictDataScope.userroleofficecompany.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByRoleId(conditionDto.getCurrentRoleId(),false);
            // 如果机构不存在，直接返回空
            if(officeDto == null){
                return new PageResultDto(null, null);
            }
            // 查找公司
            BaseOfficeDto company = apiBaseOfficePoService.selectParentCompany(officeDto.getId(),true);

            //没有找到公司
            if (company == null) {
                return new PageResultDto(null, null);

            }
            String selfCondition = com.feihua.utils.string.StringUtils.messageFormat("and data_office_id = ''{0}'' ",company.getId());

            searchDictsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseDictDto> list = this.wrapDtos(baseDictPoMapper.searchDicts(searchDictsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 公共 + 用户岗位所在机构的公司
        if(DictEnum.DictDataScope.publics_userroleofficecompany.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByPostId(conditionDto.getCurrentPostId(),false);
            BaseOfficeDto company = null;
            // 查找公司
            if(officeDto != null){
                // 查找公司
                company = apiBaseOfficePoService.selectParentCompany(officeDto.getId(),true);
            }
            String selfCondition = null;
            if (company == null) {
                selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and is_public = ''{0}'' ",BasePo.YesNo.Y.name());
            }else {
                selfCondition = com.feihua.utils.string.StringUtils.messageFormat(" and (is_public = ''{0}'' or data_office_id = ''{1}'') ",BasePo.YesNo.Y.name(),company.getId());
            }
            searchDictsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseDictDto> list = this.wrapDtos(baseDictPoMapper.searchDicts(searchDictsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 用户岗位所在机构的公司
        if(DictEnum.DictDataScope.userroleofficecompany.name().equals(defineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);

            BaseOfficeDto officeDto = apiBaseOfficePoService.selectOfficeByPostId(conditionDto.getCurrentPostId(),false);
            // 如果机构不存在，直接返回空
            if(officeDto == null){
                return new PageResultDto(null, null);
            }
            // 查找公司
            BaseOfficeDto company = apiBaseOfficePoService.selectParentCompany(officeDto.getId(),true);

            //没有找到公司
            if (company == null) {
                return new PageResultDto(null, null);

            }
            String selfCondition = com.feihua.utils.string.StringUtils.messageFormat("and data_office_id = ''{0}'' ",company.getId());

            searchDictsConditionDsfDto.setSelfCondition(selfCondition);
            List<BaseDictDto> list = this.wrapDtos(baseDictPoMapper.searchDicts(searchDictsConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        return new PageResultDto(null, null);
    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public List<BaseDictDto> selectByTypeDsf(SelectDictsConditionDto selectDictsConditionDto, Orderby orderby) {
        if(selectDictsConditionDto == null || StringUtils.isEmpty(selectDictsConditionDto.getType())){
            return null;
        }
        // 如果没有当前登录用户，返回公共的字典，考虑到不需要登录的情况
        if (StringUtils.isEmpty(selectDictsConditionDto.getCurrentUserId())) {
            SearchDictsConditionDsfDto searchDictsConditionDsfDto = new SearchDictsConditionDsfDto();
            searchDictsConditionDsfDto.setType(selectDictsConditionDto.getType());
            searchDictsConditionDsfDto.setIsPublic(BasePo.YesNo.Y.name());

            this.orderbyStart(orderby);
            List<BaseDictDto> list = this.wrapDtos(baseDictPoMapper.searchDicts(searchDictsConditionDsfDto));
            return list;
        }




        SearchDictsConditionDto searchDictsConditionDto = new SearchDictsConditionDto();
        searchDictsConditionDto.setType(selectDictsConditionDto.getType());
        searchDictsConditionDto.setCurrentPostId(selectDictsConditionDto.getCurrentPostId());
        searchDictsConditionDto.setCurrentRoleId(selectDictsConditionDto.getCurrentRoleId());
        searchDictsConditionDto.setCurrentUserId(selectDictsConditionDto.getCurrentUserId());
        PageAndOrderbyParamDto pageAndOrderbyParamDto = new PageAndOrderbyParamDto();
        pageAndOrderbyParamDto.setOrderby(orderby);
        PageResultDto resultDto = this.searchDictsDsf(searchDictsConditionDto,pageAndOrderbyParamDto);

        return resultDto.getData();
    }

    @Override
    public String selectDictLabel(String type,String value){
        if (StringUtils.isEmpty(type) || StringUtils.isEmpty(value)){
            return null;
        }
        BaseDictPo condition = new BaseDictPo();
        condition.setType(type);
        condition.setValue(value);

        condition = this.selectOneSimple(condition);
        return condition == null ? null : condition.getName();
    }

    @Override
    public BaseDictDto wrapDto(BaseDictPo po) {
        if (po == null) {
            return null;
        }
        BaseDictDto baseDictDto = new BaseDictDto();
        baseDictDto.setName(po.getName());
        baseDictDto.setValue(po.getValue());
        baseDictDto.setDataOfficeId(po.getDataOfficeId());
        baseDictDto.setDiscription(po.getDiscription());
        baseDictDto.setParentId(po.getParentId());
        baseDictDto.setLevel(po.getLevel());
        baseDictDto.setId(po.getId());
        baseDictDto.setSequence(po.getSequence());
        baseDictDto.setType(po.getType());
        baseDictDto.setDataUserId(po.getDataUserId());
        baseDictDto.setIsPublic(po.getIsPublic());
        baseDictDto.setDataType(po.getDataType());
        baseDictDto.setDataAreaId(po.getDataAreaId());
        baseDictDto.setIsSystem(po.getIsSystem());
        baseDictDto.setUpdateAt(po.getUpdateAt());
        return baseDictDto;
    }
}