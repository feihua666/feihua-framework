package com.feihua.framework.base.impl;

import com.feihua.framework.base.modules.rel.api.ApiBaseRoleDataScopeRelPoService;
import com.feihua.framework.base.modules.rel.dto.BaseRoleDataScopeRelDto;
import com.feihua.framework.base.modules.rel.dto.DataScopeBindRolesParamDto;
import com.feihua.framework.base.modules.rel.dto.RoleBindDataScopesParamDto;
import com.feihua.framework.base.modules.rel.po.BaseRoleDataScopeRelPo;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2018-02-01 20:49:08
 */
@Service
public class ApiBaseRoleDataScopeRelPoServiceImpl extends ApiBaseServiceImpl<BaseRoleDataScopeRelPo, BaseRoleDataScopeRelDto, String> implements ApiBaseRoleDataScopeRelPoService {

    public ApiBaseRoleDataScopeRelPoServiceImpl() {
        super(BaseRoleDataScopeRelDto.class);
    }


    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BaseRoleDataScopeRelDto selectByRoleId(String roleId) {
        if (roleId == null) {
            return null;
        }
        BaseRoleDataScopeRelPo baseRoleDataScopeRelPo = new BaseRoleDataScopeRelPo();
        baseRoleDataScopeRelPo.setRoleId(roleId);
        baseRoleDataScopeRelPo.setDelFlag(BasePo.YesNo.N.name());
        return this.selectOne(baseRoleDataScopeRelPo);
    }

    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public List<BaseRoleDataScopeRelDto> selectByDataScopeId(String dataScopeId) {
        BaseRoleDataScopeRelPo baseRoleDataScopeRelPo = new BaseRoleDataScopeRelPo();
        baseRoleDataScopeRelPo.setDataScopeId(dataScopeId);
        baseRoleDataScopeRelPo.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(baseRoleDataScopeRelPo);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int deleteFlagByRoleId(String roleId,String userId) {
        BaseRoleDataScopeRelPo baseRoleDataScopeRelPo = new BaseRoleDataScopeRelPo();
        baseRoleDataScopeRelPo.setRoleId(roleId);
        baseRoleDataScopeRelPo.setDelFlag(BasePo.YesNo.N.name());
        int r = this.deleteFlagSelectiveWithUpdateUser(baseRoleDataScopeRelPo,userId);
        return r;
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int deleteFlagByDataScopeId(String dataScopeId,String userId) {
        BaseRoleDataScopeRelPo baseRoleDataScopeRelPo = new BaseRoleDataScopeRelPo();
        baseRoleDataScopeRelPo.setDataScopeId(dataScopeId);
        baseRoleDataScopeRelPo.setDelFlag(BasePo.YesNo.N.name());
        int r = this.deleteFlagSelectiveWithUpdateUser(baseRoleDataScopeRelPo,userId);
        return r;
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int roleBindDataScopes(RoleBindDataScopesParamDto roleBindDataScopesParamDto) {

        // 先根据角色id删除关系
        int deleteR = this.deleteFlagByRoleId(roleBindDataScopesParamDto.getRoleId(),roleBindDataScopesParamDto.getCurrentUserId());
        // 再插入新的关系
        List<String> dataScopeIds = roleBindDataScopesParamDto.getDataScopeIds();
        if(CollectionUtils.isNotEmpty(dataScopeIds)){
            BaseRoleDataScopeRelPo baseRoleDataScopeRelPo = null;
            List<BaseRoleDataScopeRelPo> insertedList = new ArrayList<>(dataScopeIds.size());
            for (String dataScopeId : dataScopeIds) {
                baseRoleDataScopeRelPo = new BaseRoleDataScopeRelPo();
                baseRoleDataScopeRelPo.setRoleId(roleBindDataScopesParamDto.getRoleId());
                baseRoleDataScopeRelPo.setDataScopeId(dataScopeId);
                baseRoleDataScopeRelPo.setDelFlag(BasePo.YesNo.N.name());
                baseRoleDataScopeRelPo = this.preInsert(baseRoleDataScopeRelPo,roleBindDataScopesParamDto.getCurrentUserId());
                insertedList.add(baseRoleDataScopeRelPo );
            }
            return this.insertBatch(insertedList);
        }
        return deleteR;
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int DataScopeBindRoles(DataScopeBindRolesParamDto dataScopeBindRolesParamDto) {
        // 先根据数据范围id删除关系
        int deleteR = this.deleteFlagByDataScopeId(dataScopeBindRolesParamDto.getDataScopeId(),dataScopeBindRolesParamDto.getCurrentUserId());
        // 再插入新的关系
        List<String> roleIds = dataScopeBindRolesParamDto.getRoleIds();
        if(CollectionUtils.isNotEmpty(roleIds)){
            BaseRoleDataScopeRelPo baseRoleDataScopeRelPo = null;
            List<BaseRoleDataScopeRelPo> insertedList = new ArrayList<>(roleIds.size());
            for (String roleId : roleIds) {
                baseRoleDataScopeRelPo = new BaseRoleDataScopeRelPo();
                baseRoleDataScopeRelPo.setDataScopeId(dataScopeBindRolesParamDto.getDataScopeId());
                baseRoleDataScopeRelPo.setDataScopeId(roleId);
                baseRoleDataScopeRelPo.setDelFlag(BasePo.YesNo.N.name());
                baseRoleDataScopeRelPo = this.preInsert(baseRoleDataScopeRelPo,dataScopeBindRolesParamDto.getCurrentUserId());
                insertedList.add(baseRoleDataScopeRelPo );
            }
            return this.insertBatch(insertedList);
        }
        return deleteR;
    }

    @Override
    public BaseRoleDataScopeRelDto wrapDto(BaseRoleDataScopeRelPo po) {
        if (po == null) {
            return null;
        }
        BaseRoleDataScopeRelDto roleDataScopeRelDto = new BaseRoleDataScopeRelDto();
        roleDataScopeRelDto.setDataScopeId(po.getDataScopeId());
        roleDataScopeRelDto.setDataOfficeId(po.getDataOfficeId());
        roleDataScopeRelDto.setUpdateAt(po.getUpdateAt());
        roleDataScopeRelDto.setId(po.getId());
        roleDataScopeRelDto.setDataUserId(po.getDataUserId());
        roleDataScopeRelDto.setDataType(po.getDataType());
        roleDataScopeRelDto.setRoleId(po.getRoleId());
        roleDataScopeRelDto.setDataAreaId(po.getDataAreaId());
        return roleDataScopeRelDto;
    }
}