package com.feihua.framework.base.impl;

import com.feihua.framework.base.modules.datascope.api.ApiBaseDataScopeService;
import com.feihua.framework.base.modules.postjob.api.ApiBasePostDataScopeDefinePoService;
import com.feihua.framework.base.modules.postjob.api.ApiBasePostPoService;
import com.feihua.framework.base.modules.postjob.dto.BasePostDataScopeDefineDto;
import com.feihua.framework.base.modules.postjob.dto.BasePostDataScopeDefineParamDto;
import com.feihua.framework.base.modules.postjob.po.BasePostDataScopeDefinePo;
import com.feihua.framework.base.modules.postjob.po.BasePostPo;
import com.feihua.framework.base.modules.rel.api.ApiBasePostRoleRelPoService;
import com.feihua.framework.base.modules.rel.api.ApiBaseRoleDataScopeRelPoService;
import com.feihua.framework.base.modules.rel.api.ApiBaseUserDataScopeRelPoService;
import com.feihua.framework.base.modules.rel.dto.BasePostRoleRelDto;
import com.feihua.framework.base.modules.rel.dto.BaseRoleDataScopeRelDto;
import com.feihua.framework.base.modules.rel.dto.BaseUserDataScopeRelDto;
import com.feihua.framework.base.modules.role.api.ApiBaseRolePoService;
import com.feihua.framework.base.modules.role.po.BaseRolePo;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2019-06-14 11:32:30
 */
@Service
public class ApiBasePostDataScopeDefinePoServiceImpl extends ApiBaseServiceImpl<BasePostDataScopeDefinePo, BasePostDataScopeDefineDto, String> implements ApiBasePostDataScopeDefinePoService, ApiBaseDataScopeService<BasePostDataScopeDefineDto> {
    @Autowired
    com.feihua.framework.base.mapper.BasePostDataScopeDefinePoMapper BasePostDataScopeDefinePoMapper;

    public ApiBasePostDataScopeDefinePoServiceImpl() {
        super(BasePostDataScopeDefineDto.class);
    }

    @Autowired
    private ApiBaseUserDataScopeRelPoService apiBaseUserDataScopeRelPoService;
    @Autowired
    private ApiBaseRoleDataScopeRelPoService apiBaseRoleDataScopeRelPoService;

    @Autowired
    private ApiBaseRolePoService apiBaseRolePoService;
    @Autowired
    private ApiBasePostPoService apiBasePostPoService;
    @Autowired
    private ApiBasePostRoleRelPoService apiBasePostRoleRelPoService;

    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BasePostDataScopeDefineDto selectByDataScopeId(String dataScopeId) {

        BasePostDataScopeDefinePo dataScopeDefinePo = new BasePostDataScopeDefinePo();
        dataScopeDefinePo.setDataScopeId(dataScopeId);
        dataScopeDefinePo.setDelFlag(BasePo.YesNo.N.name());
        return this.selectOne(dataScopeDefinePo);
    }
    @Transactional(rollbackFor = Exception.class,readOnly = false)
    @Override
    public BasePostDataScopeDefineDto setPostDataScopeDefine(BasePostDataScopeDefineParamDto postDataScopeDefineParamDto) {
        BasePostDataScopeDefinePo postDataScopeDefineCondition = new BasePostDataScopeDefinePo();
        postDataScopeDefineCondition.setDataScopeId(postDataScopeDefineParamDto.getDataScopeId());
        postDataScopeDefineCondition.setDelFlag(BasePo.YesNo.N.name());
        BasePostDataScopeDefineDto result = null;
        // 查询是否存在
        BasePostDataScopeDefinePo postDataScopeDefinePo = this.selectOneSimple(postDataScopeDefineCondition);
        // 如果不存在，添加一条新的设置
        if (postDataScopeDefinePo == null) {
            BasePostDataScopeDefinePo insertPostDataScopeDefinePo = new BasePostDataScopeDefinePo();
            insertPostDataScopeDefinePo.setDataScopeId(postDataScopeDefineParamDto.getDataScopeId());
            insertPostDataScopeDefinePo.setType(postDataScopeDefineParamDto.getType());
            insertPostDataScopeDefinePo = this.preInsert(insertPostDataScopeDefinePo,postDataScopeDefineParamDto.getCurrentUserId());

            result = this.insert(insertPostDataScopeDefinePo);

            return result;
        }else{
            // 如果已经存在，更新
            postDataScopeDefinePo.setType(postDataScopeDefineParamDto.getType());
            postDataScopeDefinePo = this.preUpdate(postDataScopeDefinePo,postDataScopeDefineParamDto.getCurrentUserId());
            // 这里没有考虑乐观锁
            int r = this.updateByPrimaryKey(postDataScopeDefinePo);
            if(r == 1){
                result = this.wrapDto(postDataScopeDefinePo);
                return result;
            }else{
                return null;
            }

        }

    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BasePostDataScopeDefineDto selectDataScopeDefineByUserId(String userId, String roleId,String postId) {
        // 用户设置了数据范围，以该数据范围优先
        BaseUserDataScopeRelDto userDataScopeRelDto = apiBaseUserDataScopeRelPoService.selectByUserId(userId);
        if(userDataScopeRelDto != null){
            BasePostDataScopeDefineDto defineDto = this.selectByDataScopeId(userDataScopeRelDto.getDataScopeId());
            return defineDto;
        }
        // 取角色设置的数据范围
        BaseRolePo rolePo = apiBaseRolePoService.selectByPrimaryKeySimple(roleId,false);
        if (rolePo != null && !BasePo.YesNo.Y.name().equals(rolePo.getDisabled())) {
            BaseRoleDataScopeRelDto roleDataScopeRelDto = apiBaseRoleDataScopeRelPoService.selectByRoleId(roleId);
            if (roleDataScopeRelDto != null) {
                BasePostDataScopeDefineDto defineDto = this.selectByDataScopeId(roleDataScopeRelDto.getDataScopeId());

                return defineDto;
            }
        }
        // 取岗位绑定的角色设置的数据范围
        BasePostPo postPo = apiBasePostPoService.selectByPrimaryKeySimple(postId,false);
        if (postPo != null && !BasePo.YesNo.Y.name().equals(postPo.getDisabled())) {
            BasePostRoleRelDto postRoleRelDto = apiBasePostRoleRelPoService.selectByPostId(postId);
            if (postRoleRelDto != null) {
                BaseRoleDataScopeRelDto roleDataScopeRelDto = apiBaseRoleDataScopeRelPoService.selectByRoleId(postRoleRelDto.getRoleId());
                if(roleDataScopeRelDto != null){
                    BasePostDataScopeDefineDto defineDto = this.selectByDataScopeId(roleDataScopeRelDto.getDataScopeId());
                    return defineDto;
                }
            }
        }
        return null;
    }

    @Override
    public boolean isAllData(BasePostDataScopeDefineDto dataScopeDefine) {
        return false;
    }

    @Override
    public BasePostDataScopeDefineDto wrapDto(BasePostDataScopeDefinePo po) {
        if (po == null) { return null; }
        BasePostDataScopeDefineDto dto = new BasePostDataScopeDefineDto();
        dto.setId(po.getId());
        dto.setDataScopeId(po.getDataScopeId());
        dto.setType(po.getType());
        dto.setDataUserId(po.getDataUserId());
        dto.setDataOfficeId(po.getDataOfficeId());
        dto.setDataType(po.getDataType());
        dto.setDataAreaId(po.getDataAreaId());
        dto.setUpdateAt(po.getUpdateAt());
        return dto;
    }
}