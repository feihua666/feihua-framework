package com.feihua.framework.base.impl;

import com.feihua.framework.base.modules.rel.api.ApiBaseUserRoleRelPoService;
import com.feihua.framework.base.modules.rel.dto.BaseUserRoleRelDto;
import com.feihua.framework.base.modules.rel.dto.RoleBindUsersParamDto;
import com.feihua.framework.base.modules.rel.dto.UserBindRolesParamDto;
import com.feihua.framework.base.modules.rel.po.BaseUserRoleRelPo;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2018-01-30 19:59:17
 */
@Service
public class ApiBaseUserRoleRelPoServiceImpl extends ApiBaseServiceImpl<BaseUserRoleRelPo, BaseUserRoleRelDto, String> implements ApiBaseUserRoleRelPoService {

    public ApiBaseUserRoleRelPoServiceImpl() {
        super(BaseUserRoleRelDto.class);
    }

    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public List<BaseUserRoleRelDto> selectByUserId(String userId) {
        BaseUserRoleRelPo baseUserRoleRelPoCondition = new BaseUserRoleRelPo();
        baseUserRoleRelPoCondition.setUserId(userId);
        baseUserRoleRelPoCondition.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(baseUserRoleRelPoCondition);
    }

    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public List<BaseUserRoleRelDto> selectByRoleId(String roleId) {
        if (roleId == null) {
            return null;
        }
        BaseUserRoleRelPo baseUserRoleRelPoCondition = new BaseUserRoleRelPo();
        baseUserRoleRelPoCondition.setRoleId(roleId);
        baseUserRoleRelPoCondition.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(baseUserRoleRelPoCondition);
    }

    @Override
    public BaseUserRoleRelDto selectByUserIdAndRoleId(String userId, String roleId) {
        BaseUserRoleRelPo baseUserRoleRelPoCondition = new BaseUserRoleRelPo();
        baseUserRoleRelPoCondition.setRoleId(roleId);
        baseUserRoleRelPoCondition.setUserId(userId);
        baseUserRoleRelPoCondition.setDelFlag(BasePo.YesNo.N.name());
        return this.selectOne(baseUserRoleRelPoCondition);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int deleteFlagByUserId(String userId, String loginUserId) {
        BaseUserRoleRelPo baseUserRoleRelPoCondition = new BaseUserRoleRelPo();
        baseUserRoleRelPoCondition.setUserId(userId);
        baseUserRoleRelPoCondition.setDelFlag(BasePo.YesNo.N.name());
        return this.deleteFlagSelectiveWithUpdateUser(baseUserRoleRelPoCondition,loginUserId);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int deleteFlagByRoleId(String roleId, String loginUserId) {
        BaseUserRoleRelPo baseUserRoleRelPoCondition = new BaseUserRoleRelPo();
        baseUserRoleRelPoCondition.setRoleId(roleId);
        baseUserRoleRelPoCondition.setDelFlag(BasePo.YesNo.N.name());
        return this.deleteFlagSelectiveWithUpdateUser(baseUserRoleRelPoCondition,loginUserId);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int userBindRoles(UserBindRolesParamDto userBindRolesParamDto) {
        // 先删除以前的
        int deleteR = this.deleteFlagByUserId(userBindRolesParamDto.getUserId(),userBindRolesParamDto.getCurrentUserId());
        List<String> roleIds = userBindRolesParamDto.getRoleIds();
        // 批量插入新关系
        if(roleIds != null && !roleIds.isEmpty()){
            BaseUserRoleRelPo userRoleRelPo = null;
            List<BaseUserRoleRelPo> addList = new ArrayList<>(roleIds.size());
            for (String roleId : roleIds) {
                userRoleRelPo = new BaseUserRoleRelPo();
                userRoleRelPo.setRoleId(roleId);
                userRoleRelPo.setUserId(userBindRolesParamDto.getUserId());
                userRoleRelPo.setDelFlag(BasePo.YesNo.N.name());
                userRoleRelPo = this.preInsert(userRoleRelPo,userBindRolesParamDto.getCurrentUserId());
                addList.add(userRoleRelPo);
            }
            return this.insertBatch(addList);
        }

        return deleteR;
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int roleBindUsers(RoleBindUsersParamDto roleBindUsersParamDto) {
        // 先删除以前的
        int deleteR = this.deleteFlagByRoleId(roleBindUsersParamDto.getRoleId(),roleBindUsersParamDto.getCurrentUserId());
        List<String> userIds = roleBindUsersParamDto.getUserIds();
        // 批量插入新关系
        if(userIds != null && !userIds.isEmpty()){
            BaseUserRoleRelPo userRoleRelPo = null;
            List<BaseUserRoleRelPo> addList = new ArrayList<>(userIds.size());
            for (String userId : userIds) {
                userRoleRelPo = new BaseUserRoleRelPo();
                userRoleRelPo.setUserId(userId);
                userRoleRelPo.setRoleId(roleBindUsersParamDto.getRoleId());
                userRoleRelPo.setDelFlag(BasePo.YesNo.N.name());
                userRoleRelPo = this.preInsert(userRoleRelPo,roleBindUsersParamDto.getCurrentUserId());
                addList.add(userRoleRelPo);
            }
            return this.insertBatch(addList);
        }

        return deleteR;
    }

    @Override
    public BaseUserRoleRelDto wrapDto(BaseUserRoleRelPo po) {
        if (po == null) {
            return null;
        }
        BaseUserRoleRelDto baseUserRoleRelDto = new BaseUserRoleRelDto();
        baseUserRoleRelDto.setDataOfficeId(po.getDataOfficeId());
        baseUserRoleRelDto.setDataUserId(po.getDataUserId());
        baseUserRoleRelDto.setDataAreaId(po.getDataAreaId());
        baseUserRoleRelDto.setDataType(po.getDataType());
        baseUserRoleRelDto.setId(po.getId());
        baseUserRoleRelDto.setUserId(po.getUserId());
        baseUserRoleRelDto.setRoleId(po.getRoleId());
        baseUserRoleRelDto.setUpdateAt(po.getUpdateAt());
        return baseUserRoleRelDto;
    }
}