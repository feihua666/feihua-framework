package com.feihua.framework.base.impl;

import com.feihua.framework.base.modules.rel.api.ApiBaseUserPostRelPoService;
import com.feihua.framework.base.modules.rel.dto.BaseUserPostRelDto;
import com.feihua.framework.base.modules.rel.dto.PostBindUsersParamDto;
import com.feihua.framework.base.modules.rel.dto.UserBindPostsParamDto;
import com.feihua.framework.base.modules.rel.po.BaseUserPostRelPo;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2019-06-12 14:56:32
 */
@Service
public class ApiBaseUserPostRelPoServiceImpl extends ApiBaseServiceImpl<BaseUserPostRelPo, BaseUserPostRelDto, String> implements ApiBaseUserPostRelPoService {
    @Autowired
    com.feihua.framework.base.mapper.BaseUserPostRelPoMapper BaseUserPostRelPoMapper;

    public ApiBaseUserPostRelPoServiceImpl() {
        super(BaseUserPostRelDto.class);
    }

    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public List<BaseUserPostRelDto> selectByUserId(String userId) {
        BaseUserPostRelPo baseUserPostRelPoCondition = new BaseUserPostRelPo();
        baseUserPostRelPoCondition.setUserId(userId);
        baseUserPostRelPoCondition.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(baseUserPostRelPoCondition);
    }

    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public List<BaseUserPostRelDto> selectByPostId(String postId) {
        BaseUserPostRelPo baseUserPostRelPoCondition = new BaseUserPostRelPo();
        baseUserPostRelPoCondition.setPostId(postId);
        baseUserPostRelPoCondition.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(baseUserPostRelPoCondition);
    }

    @Override
    public BaseUserPostRelDto selectByUserIdAndPostId(String userId, String postId) {
        BaseUserPostRelPo baseUserPostRelPoCondition = new BaseUserPostRelPo();
        baseUserPostRelPoCondition.setPostId(postId);
        baseUserPostRelPoCondition.setUserId(userId);
        baseUserPostRelPoCondition.setDelFlag(BasePo.YesNo.N.name());
        return this.selectOne(baseUserPostRelPoCondition);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int deleteFlagByUserId(String userId, String loginUserId) {
        BaseUserPostRelPo baseUserPostRelPoCondition = new BaseUserPostRelPo();
        baseUserPostRelPoCondition.setUserId(userId);
        baseUserPostRelPoCondition.setDelFlag(BasePo.YesNo.N.name());
        return this.deleteFlagSelectiveWithUpdateUser(baseUserPostRelPoCondition,loginUserId);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int deleteFlagByPostId(String postId, String loginUserId) {
        BaseUserPostRelPo baseUserPostRelPoCondition = new BaseUserPostRelPo();
        baseUserPostRelPoCondition.setPostId(postId);
        baseUserPostRelPoCondition.setDelFlag(BasePo.YesNo.N.name());
        return this.deleteFlagSelectiveWithUpdateUser(baseUserPostRelPoCondition,loginUserId);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int userBindPosts(UserBindPostsParamDto userBindPostsParamDto) {
        // 先删除以前的
        int deleteR = this.deleteFlagByUserId(userBindPostsParamDto.getUserId(),userBindPostsParamDto.getCurrentUserId());
        List<String> postIds = userBindPostsParamDto.getPostIds();
        // 批量插入新关系
        if(postIds != null && !postIds.isEmpty()){
            BaseUserPostRelPo userPostRelPo = null;
            List<BaseUserPostRelPo> addList = new ArrayList<>(postIds.size());
            for (String postId : postIds) {
                userPostRelPo = new BaseUserPostRelPo();
                userPostRelPo.setPostId(postId);
                userPostRelPo.setUserId(userBindPostsParamDto.getUserId());
                userPostRelPo.setDelFlag(BasePo.YesNo.N.name());
                userPostRelPo = this.preInsert(userPostRelPo,userBindPostsParamDto.getCurrentUserId());
                addList.add(userPostRelPo);
            }
            return this.insertBatch(addList);
        }

        return deleteR;
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int postBindUsers(PostBindUsersParamDto postBindUsersParamDto) {
        // 先删除以前的
        int deleteR = this.deleteFlagByPostId(postBindUsersParamDto.getPostId(),postBindUsersParamDto.getCurrentUserId());
        List<String> userIds = postBindUsersParamDto.getUserIds();
        // 批量插入新关系
        if(userIds != null && !userIds.isEmpty()){
            BaseUserPostRelPo userPostRelPo = null;
            List<BaseUserPostRelPo> addList = new ArrayList<>(userIds.size());
            for (String userId : userIds) {
                userPostRelPo = new BaseUserPostRelPo();
                userPostRelPo.setUserId(userId);
                userPostRelPo.setPostId(postBindUsersParamDto.getPostId());
                userPostRelPo.setDelFlag(BasePo.YesNo.N.name());
                userPostRelPo = this.preInsert(userPostRelPo,postBindUsersParamDto.getCurrentUserId());
                addList.add(userPostRelPo);
            }
            return this.insertBatch(addList);
        }

        return deleteR;
    }
    @Override
    public BaseUserPostRelDto wrapDto(BaseUserPostRelPo po) {
        if (po == null) { return null; }
        BaseUserPostRelDto dto = new BaseUserPostRelDto();
        dto.setId(po.getId());
        dto.setUserId(po.getUserId());
        dto.setPostId(po.getPostId());
        dto.setIsMain(po.getIsMain());
        dto.setDataUserId(po.getDataUserId());
        dto.setDataOfficeId(po.getDataOfficeId());
        dto.setDataType(po.getDataType());
        dto.setDataAreaId(po.getDataAreaId());
        dto.setUpdateAt(po.getUpdateAt());
        return dto;
    }
}