package com.feihua.framework.base.impl;

import com.feihua.framework.base.modules.user.api.ApiBaseUserAccessLasttimePoService;
import com.feihua.framework.base.modules.user.dto.BaseUserAccessLasttimeDto;
import com.feihua.framework.base.modules.user.dto.BaseUserAccessLasttimeParamDto;
import com.feihua.framework.base.modules.user.po.BaseUserAccessLasttimePo;
import com.feihua.framework.jedis.utils.JedisUtils;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2019-06-18 09:24:16
 */
@Service
public class ApiBaseUserAccessLasttimePoServiceImpl extends ApiBaseServiceImpl<BaseUserAccessLasttimePo, BaseUserAccessLasttimeDto, String> implements ApiBaseUserAccessLasttimePoService {

    private static String keyPrefix = "userAccessLasttimePrefix";

    @Autowired
    com.feihua.framework.base.mapper.BaseUserAccessLasttimePoMapper BaseUserAccessLasttimePoMapper;

    public ApiBaseUserAccessLasttimePoServiceImpl() {
        super(BaseUserAccessLasttimeDto.class);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public int saveUserAccessLasttime(BaseUserAccessLasttimeParamDto paramDto) {

        BaseUserAccessLasttimePo userAccessLasttimePo = selectByUserIdAndClientId(paramDto.getUserId(),paramDto.getClientId());
        // 不存在插入
        if (userAccessLasttimePo == null) {
            userAccessLasttimePo = new BaseUserAccessLasttimePo();
            userAccessLasttimePo.setUserId(paramDto.getUserId());
            userAccessLasttimePo.setUserNickname(paramDto.getUserNickname());
            userAccessLasttimePo.setClientId(paramDto.getClientId());
            userAccessLasttimePo.setClientName(paramDto.getClientName());
            userAccessLasttimePo.setAccessIp(paramDto.getAccessIp());
            userAccessLasttimePo.setAccessLasttime(paramDto.getAccessLasttime());
            userAccessLasttimePo = this.preInsert(userAccessLasttimePo,paramDto.getCurrentUserId());
            userAccessLasttimePo = this.insertSimple(userAccessLasttimePo);

        }
        // 存在更新
        else {
            // 不需要再设置userId,和clientId，因为是根据这两个参数查出来的
            userAccessLasttimePo.setUserNickname(paramDto.getUserNickname());
            userAccessLasttimePo.setClientName(paramDto.getClientName());
            userAccessLasttimePo.setAccessIp(paramDto.getAccessIp());
            userAccessLasttimePo.setAccessLasttime(paramDto.getAccessLasttime());
            userAccessLasttimePo = this.preUpdate(userAccessLasttimePo,paramDto.getCurrentUserId());
            this.updateByPrimaryKeySelective(userAccessLasttimePo);
        }
        // 设置到缓存中
        // 时间一小时
        JedisUtils.setObject(getKey(paramDto.getUserId(),paramDto.getClientId()),userAccessLasttimePo,3600);
        return 1;
    }


    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BaseUserAccessLasttimePo selectByUserIdAndClientId(String userId, String clientId) {
        if(StringUtils.isAnyEmpty(userId,clientId)) return null;

        String key = getKey(userId,clientId);
        BaseUserAccessLasttimePo userAccessLasttimePo = (BaseUserAccessLasttimePo) JedisUtils.getObject( key);
        if (userAccessLasttimePo == null) {
            userAccessLasttimePo = new BaseUserAccessLasttimePo();
            userAccessLasttimePo.setUserId(userId);
            userAccessLasttimePo.setClientId(clientId);
            userAccessLasttimePo.setDelFlag(BasePo.YesNo.N.name());
            userAccessLasttimePo = this.selectOneSimple(userAccessLasttimePo);
            if (userAccessLasttimePo != null) {
                // 时间一小时
                JedisUtils.setObject(key,userAccessLasttimePo,3600);
            }
        }

        return userAccessLasttimePo;
    }
    private String getKey(String userId, String clientId){
        String key = keyPrefix + "_" + userId + "_" + clientId;

        return key;
    }
    @Override
    public BaseUserAccessLasttimeDto wrapDto(BaseUserAccessLasttimePo po) {
        if (po == null) { return null; }
        BaseUserAccessLasttimeDto dto = new BaseUserAccessLasttimeDto();
        dto.setId(po.getId());
        dto.setUserId(po.getUserId());
        dto.setUserNickname(po.getUserNickname());
        dto.setClientId(po.getClientId());
        dto.setClientName(po.getClientName());
        dto.setAccessIp(po.getAccessIp());
        dto.setAccessLasttime(po.getAccessLasttime());
        dto.setDataUserId(po.getDataUserId());
        dto.setDataOfficeId(po.getDataOfficeId());
        dto.setDataType(po.getDataType());
        dto.setDataAreaId(po.getDataAreaId());
        dto.setUpdateAt(po.getUpdateAt());
        return dto;
    }

}