package com.feihua.framework.base.impl;

import com.feihua.framework.base.mapper.BaseOfficePoMapper;
import com.feihua.framework.base.modules.datascope.api.ApiBaseDataScopeService;
import com.feihua.framework.base.modules.group.api.ApiBaseUserGroupPoService;
import com.feihua.framework.base.modules.group.po.BaseUserGroupPo;
import com.feihua.framework.base.modules.postjob.api.ApiBasePostPoService;
import com.feihua.framework.base.modules.postjob.po.BasePostPo;
import com.feihua.framework.constants.DictEnum;
import com.feihua.framework.base.modules.office.api.ApiBaseOfficeDataScopeDefineSelfPoService;
import com.feihua.framework.base.modules.office.api.ApiBaseOfficePoService;
import com.feihua.framework.base.modules.office.dto.*;
import com.feihua.framework.base.modules.office.po.BaseOfficePo;
import com.feihua.framework.base.modules.role.api.ApiBaseRolePoService;
import com.feihua.framework.base.modules.role.po.BaseRolePo;
import com.feihua.framework.base.modules.user.api.ApiBaseUserPoService;
import com.feihua.framework.base.modules.user.po.BaseUserPo;
import com.github.pagehelper.Page;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.pojo.PageAndOrderbyParamDto;
import feihua.jdbc.api.pojo.PageResultDto;
import feihua.jdbc.api.service.impl.ApiBaseTreeServiceImpl;
import feihua.jdbc.api.utils.OrderbyUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2018-01-05 15:51:59
 */
@Service
public class ApiBaseOfficePoServiceImpl extends ApiBaseTreeServiceImpl<BaseOfficePo, BaseOfficeDto, String> implements ApiBaseOfficePoService {

    public ApiBaseOfficePoServiceImpl() {
        super(BaseOfficeDto.class);
    }

    @Autowired
    private BaseOfficePoMapper baseOfficePoMapper;
    @Autowired
    private ApiBaseDataScopeService<BaseOfficeDataScopeDefineDto> apiBaseDataScopeService;

    @Autowired
    private ApiBaseUserPoService apiBaseUserPoService;
    @Autowired
    private ApiBaseRolePoService apiBaseRolePoService;
    @Autowired
    private ApiBasePostPoService apiBasePostPoService;
    @Autowired
    private ApiBaseUserGroupPoService apiBaseUserGroupPoService;
    @Autowired
    private ApiBaseOfficeDataScopeDefineSelfPoService apiBaseOfficeDataScopeDefineSelfPoService;

    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BaseOfficeDto selectOfficeByUserId(String userId){
        BaseUserPo userPo = apiBaseUserPoService.selectByPrimaryKeySimple(userId,false);
        // 如果用户存在
        if(userPo != null && StringUtils.isNotEmpty(userPo.getDataOfficeId())){
            return this.selectByPrimaryKey(userPo.getDataOfficeId());
        }
        return null;
    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BaseOfficeDto selectOfficeByRoleId(String roleId,boolean includeDisabledRole) {
        BaseRolePo rolePo = apiBaseRolePoService.selectByPrimaryKeySimple(roleId,false);
        if (rolePo != null) {
            if (!includeDisabledRole && BaseRolePo.YesNo.Y.name().equals(rolePo.getDisabled())) {
                return null;
            }
            if(StringUtils.isNotEmpty(rolePo.getDataOfficeId())){
                return this.selectByPrimaryKey(rolePo.getDataOfficeId());
            }
        }
        return null;
    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BaseOfficeDto selectOfficeByPostId(String postId,boolean includeDisabledPost) {
        BasePostPo postPo = apiBasePostPoService.selectByPrimaryKeySimple(postId,false);

        if (postPo != null) {
            if (!includeDisabledPost && BaseRolePo.YesNo.Y.name().equals(postPo.getDisabled())) {
                return null;
            }
            if (StringUtils.isNotEmpty(postPo.getDataOfficeId())){
                return this.selectByPrimaryKey(postPo.getDataOfficeId());
            }
        }
        return null;
    }

    @Override
    public BaseOfficeDto selectOfficeByUserGroupId(String userGroupId, boolean includeDisabledUserGroup) {
        BaseUserGroupPo userGroupPo = apiBaseUserGroupPoService.selectByPrimaryKeySimple(userGroupId,false);

        if (userGroupPo != null) {
            if (!includeDisabledUserGroup && BaseRolePo.YesNo.Y.name().equals(userGroupPo.getDisabled())) {
                return null;
            }
            if (StringUtils.isNotEmpty(userGroupPo.getDataOfficeId())){
                return this.selectByPrimaryKey(userGroupPo.getDataOfficeId());
            }
        }
        return null;
    }

    @Override
    public BaseOfficeDto selectParentCompany(String officeId,boolean includeSelf) {
        if (StringUtils.isNotEmpty(officeId)) {

            if (includeSelf) {
                BaseOfficeDto tempOfficeDto = this.selectByPrimaryKey(officeId);
                if (DictEnum.OfficeType.company.name().equals(tempOfficeDto.getType()) && !BasePo.YesNo.Y.name().equals(tempOfficeDto.getDelFlag())) {
                    return tempOfficeDto;
                }
            }

            Map order = new HashMap();
            order.put("orderby","level-desc");
            order.put("orderable","true");

            List<BaseOfficePo> officePos = this.getParents(officeId,OrderbyUtils.getOrderbyFromMap(order));
            if (officePos != null) {
                for (BaseOfficePo officePo : officePos) {
                    if (DictEnum.OfficeType.company.name().equals(officePo.getType()) && !BasePo.YesNo.Y.name().equals(officePo.getDelFlag())) {
                        return this.wrapDto(officePo);
                    }
                }
            }
        }
        return null;
    }

    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public PageResultDto<BaseOfficeDto> searchOfficesDsf(SearchOfficesConditionDto conditionDto, PageAndOrderbyParamDto pageAndOrderbyParamDto) {

        BaseOfficeDataScopeDefineDto officeDataScopeDefineDto = apiBaseDataScopeService.selectDataScopeDefineByUserId(conditionDto.getCurrentUserId(),conditionDto.getCurrentRoleId(),conditionDto.getCurrentPostId());
        // 如果未设置数据范围定义，没有数据
        if (officeDataScopeDefineDto == null || StringUtils.isEmpty(officeDataScopeDefineDto.getType()) || DictEnum.OfficeDataScope.no.name().equals(officeDataScopeDefineDto.getType())) {
            return new PageResultDto(null, null);
        }

        SearchOfficesConditionDsfDto searchOfficesConditionDsfDto = new SearchOfficesConditionDsfDto();
        searchOfficesConditionDsfDto.setAreaId(conditionDto.getAreaId());
        searchOfficesConditionDsfDto.setName(conditionDto.getName());
        searchOfficesConditionDsfDto.setParentId(conditionDto.getParentId());
        searchOfficesConditionDsfDto.setType(conditionDto.getType());
        // 如果是所有数据
        if(DictEnum.OfficeDataScope.all.name().equals(officeDataScopeDefineDto.getType())){
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
            List<BaseOfficeDto> list = this.wrapDtos(baseOfficePoMapper.searchOffices(searchOfficesConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }

        // 所在机构
        if(DictEnum.OfficeDataScope.useroffice.name().equals(officeDataScopeDefineDto.getType())){
            BaseOfficeDto officeDto = this.selectOfficeByUserId(conditionDto.getCurrentUserId());
            // 如果机构不存在，直接返回空
            if(officeDto == null){
                return new PageResultDto(null, null);
            }
            searchOfficesConditionDsfDto.setId(officeDto.getId());
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
            List<BaseOfficeDto> list = this.wrapDtos(baseOfficePoMapper.searchOffices(searchOfficesConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 所在机构及以下机构
        if(DictEnum.OfficeDataScope.userofficedown.name().equals(officeDataScopeDefineDto.getType())){
            BaseOfficeDto officeDto = this.selectOfficeByUserId(conditionDto.getCurrentUserId());
            // 如果机构不存在，直接返回空
            if(officeDto == null){
                return new PageResultDto(null, null);
            }

            String selfCondition = com.feihua.utils.string.StringUtils.messageFormat("and (id = ''{0}'' or parentId{1} = ''{0}'')",officeDto.getId(),officeDto.getLevel());
            searchOfficesConditionDsfDto.setSelfCondition(selfCondition);
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
            List<BaseOfficeDto> list = this.wrapDtos(baseOfficePoMapper.searchOffices(searchOfficesConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 角色所在机构
        if(DictEnum.OfficeDataScope.roleoffice.name().equals(officeDataScopeDefineDto.getType())){
            BaseOfficeDto officeDto = this.selectOfficeByRoleId(conditionDto.getCurrentRoleId(),false);
            // 如果机构不存在，直接返回空
            if(officeDto == null){
                return new PageResultDto(null, null);
            }
            searchOfficesConditionDsfDto.setId(officeDto.getId());
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
            List<BaseOfficeDto> list = this.wrapDtos(baseOfficePoMapper.searchOffices(searchOfficesConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 角色所在机构及以下机构
        if(DictEnum.OfficeDataScope.roleofficedown.name().equals(officeDataScopeDefineDto.getType())){
            BaseOfficeDto officeDto = this.selectOfficeByRoleId(conditionDto.getCurrentRoleId(),false);
            // 如果机构不存在，直接返回空
            if(officeDto == null){
                return new PageResultDto(null, null);
            }

            String selfCondition = com.feihua.utils.string.StringUtils.messageFormat("and (id = ''{0}'' or parentId{1} = ''{0}'')",officeDto.getId(),officeDto.getLevel());
            searchOfficesConditionDsfDto.setSelfCondition(selfCondition);
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
            List<BaseOfficeDto> list = this.wrapDtos(baseOfficePoMapper.searchOffices(searchOfficesConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 岗位所在机构
        if(DictEnum.OfficeDataScope.postoffice.name().equals(officeDataScopeDefineDto.getType())){
            BaseOfficeDto officeDto = this.selectOfficeByPostId(conditionDto.getCurrentPostId(),false);
            // 如果机构不存在，直接返回空
            if(officeDto == null){
                return new PageResultDto(null, null);
            }
            searchOfficesConditionDsfDto.setId(officeDto.getId());
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
            List<BaseOfficeDto> list = this.wrapDtos(baseOfficePoMapper.searchOffices(searchOfficesConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 岗位所在机构及以下机构
        if(DictEnum.OfficeDataScope.postofficedown.name().equals(officeDataScopeDefineDto.getType())){
            BaseOfficeDto officeDto = this.selectOfficeByPostId(conditionDto.getCurrentPostId(),false);
            // 如果机构不存在，直接返回空
            if(officeDto == null){
                return new PageResultDto(null, null);
            }

            String selfCondition = com.feihua.utils.string.StringUtils.messageFormat("and (id = ''{0}'' or parentId{1} = ''{0}'')",officeDto.getId(),officeDto.getLevel());
            searchOfficesConditionDsfDto.setSelfCondition(selfCondition);
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
            List<BaseOfficeDto> list = this.wrapDtos(baseOfficePoMapper.searchOffices(searchOfficesConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        // 自定义机构
        if(DictEnum.OfficeDataScope.self.name().equals(officeDataScopeDefineDto.getType())){
            List<BaseOfficeDataScopeDefineSelfDto> officeDataScopeDefineSelfDtos = apiBaseOfficeDataScopeDefineSelfPoService.selectByOfficeDataScopeDefineId(officeDataScopeDefineDto.getId());
            if(CollectionUtils.isEmpty(officeDataScopeDefineSelfDtos)){
                return new PageResultDto(null, null);
            }
            StringBuffer stringBuffer = new StringBuffer("and (1 = 1 ");
            for (BaseOfficeDataScopeDefineSelfDto officeDataScopeDefineSelfDto : officeDataScopeDefineSelfDtos) {
                stringBuffer.append(" or id = '").append(officeDataScopeDefineSelfDto.getOfficeId()).append("'");
            }
            stringBuffer.append(")");
            searchOfficesConditionDsfDto.setSelfCondition(stringBuffer.toString());
            Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
            List<BaseOfficeDto> list = this.wrapDtos(baseOfficePoMapper.searchOffices(searchOfficesConditionDsfDto));
            return new PageResultDto(list, this.wrapPage(p));
        }
        return new PageResultDto(null, null);
    }

    @Override
    public BaseOfficeDto wrapDto(BaseOfficePo po) {
        if (po == null) {
            return null;
        }
        BaseOfficeDto officeDto = new BaseOfficeDto();
        officeDto.setName(po.getName());
        officeDto.setDataOfficeId(po.getDataOfficeId());
        officeDto.setDeputyUserId(po.getDeputyUserId());
        officeDto.setPrimaryUserId(po.getPrimaryUserId());
        officeDto.setParentId(po.getParentId());
        officeDto.setId(po.getId());
        officeDto.setAreaId(po.getAreaId());
        officeDto.setFax(po.getFax());
        officeDto.setMaster(po.getMaster());
        officeDto.setDataUserId(po.getDataUserId());
        officeDto.setUpdateAt(po.getUpdateAt());
        officeDto.setPhone(po.getPhone());
        officeDto.setZipCode(po.getZipCode());
        officeDto.setDataAreaId(po.getDataAreaId());
        officeDto.setEmail(po.getEmail());
        officeDto.setType(po.getType());
        officeDto.setLevel(po.getLevel());
        officeDto.setAddress(po.getAddress());
        officeDto.setDataType(po.getDataType());
        return officeDto;
    }
}